kind: ConfigMap
apiVersion: v1
metadata:
  name: flanneld-scripts
  namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    rkm.redpoint.games/component: flanneld
data:
  kubeconfig.windows: |
    apiVersion: v1
    kind: Config
    clusters:
    - cluster:
        certificate-authority: "C:\\var\\run\\secrets\\kubernetes.io\\serviceaccount\\ca.crt"
        server: https://{{ .Values.cluster.controllerIp }}:6443
      name: default
    contexts:
    - context:
        cluster: default
        namespace: default
        user: default
      name: default
    current-context: default
    users:
    - name: default
      user:
        tokenFile: "C:\\var\\run\\secrets\\kubernetes.io\\serviceaccount\\token"
  kubeconfig.linux: |
    apiVersion: v1
    kind: Config
    clusters:
    - cluster:
        certificate-authority: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        server: https://{{ .Values.cluster.controllerIp }}:6443
      name: default
    contexts:
    - context:
        cluster: default
        namespace: default
        user: default
      name: default
    current-context: default
    users:
    - name: default
      user:
        tokenFile: "/var/run/secrets/kubernetes.io/serviceaccount/token"
  flanneld.ps1: |
    $global:ErrorActionPreference = 'Stop';
    $global:ProgressPreference = 'SilentlyContinue';

    if ($global:IsLinux) {
      $ActiveInstall = (Get-Content -Raw -Path /opt/rkm/active).Trim()
      $NetConfPath = "/opt/rkm/$ActiveInstall/cni-plugins/net-conf.json"
      $OldCalicoFiles = @(
        "/opt/rkm/$ActiveInstall/containerd-state/cni/net.d/10-calico.conf",
        "/opt/rkm/$ActiveInstall/containerd-state/cni/net.d/10-calico.conflist",
        "/opt/rkm/$ActiveInstall/containerd-state/cni/net.d/calico-kubeconfig"
      )
      $FlannelConfDirectoryPath = "/opt/rkm/$ActiveInstall/containerd-state/cni/net.d"
      $FlannelConfPath = "/opt/rkm/$ActiveInstall/containerd-state/cni/net.d/10-flannel.conflist"
      $KubeconfigPath = "/scripts/kubeconfig"
      $FlanneldPath = "/opt/rkm/$ActiveInstall/cni-plugins/flanneld"
      $SubnetFilePath = "/opt/rkm/$ActiveInstall/containerd-state/flannel-subnet.env"
      $FlannelDataDir = "/opt/rkm/$ActiveInstall/containerd-state/flannel-data"
    } else {
      $ActiveInstall = (Get-Content -Raw -Path C:\RKM\active).Trim()
      $NetConfPath = "C:\RKM\$ActiveInstall\cni-plugins\net-conf.json"
      $OldCalicoFiles = @(
        "C:\RKM\$ActiveInstall\containerd-state\cni\net.d\10-calico.conf",
        "C:\RKM\$ActiveInstall\containerd-state\cni\net.d\10-calico.conflist",
        "C:\RKM\$ActiveInstall\containerd-state\cni\net.d\calico-kubeconfig"
      )
      $FlannelConfDirectoryPath = "C:\RKM\$ActiveInstall\containerd-state\cni\net.d"
      $FlannelConfPath = "C:\RKM\$ActiveInstall\containerd-state\cni\net.d\10-flannel.conflist"
      $KubeconfigPath = "C:\scripts\kubeconfig"
      $FlanneldPath = "C:\RKM\$ActiveInstall\cni-plugins\flanneld.exe"
      $SubnetFilePath = "C:\RKM\$ActiveInstall\containerd-state\flannel-subnet.env"
      $FlannelDataDir = "C:\RKM\$ActiveInstall\containerd-state\flannel-data"
    }
    if (!(Test-Path $FlannelDataDir)) {
      New-Item -ItemType Directory $FlannelDataDir
    }
    if (!(Test-Path $FlannelConfDirectoryPath)) {
      New-Item -ItemType Directory $FlannelConfDirectoryPath
    }

    Write-Host "Trying to resolve own hostname to IP address..."
    while ($true) {
      $Addresses = @()
      try {
        $Addresses = ([System.Net.Dns]::GetHostEntry([System.Net.Dns]::GetHostName()).AddressList | ? { $_.AddressFamily -eq "InterNetwork" } | ? { $B = $_.GetAddressBytes(); !($B[0] -eq 127 -or $B[0] -eq 172 -or ($B[0] -eq 169 -and $B[1] -eq 254)) })
      } catch {
      }
      if ($Addresses.Length -eq 0) {
        Start-Sleep -Seconds 1
        Write-Host "Unable to resolve own hostname, retrying in 1 second..."
        continue
      }
      $env:IP = $Addresses[0].IPAddressToString
      Write-Host "Detected IP address as $env:IP"
      break
    }

    Write-Host "Updating CNI configuration..."
    Set-Content -Path $NetConfPath -Value `
    @"
    {
      "Network": "{{ .Values.cluster.cidr }}", 
      "Backend": {
        "Type": "vxlan",
        "VNI": 4096,
        "Port": 4789
      }
    }
    "@
    foreach ($OldCalicoFile in $OldCalicoFiles) {
      if (Test-Path $OldCalicoFile) {
        Remove-Item -Path $OldCalicoFile -Force
      }
    }

    if ($global:IsLinux) {
      Set-Content -Path $FlannelConfPath -Value `
    @"
    {
      "name": "flannel.4096",
      "cniVersion": "1.0.0",
      "plugins": [
        {
          "type": "flannel",
          "subnetFile": "$SubnetFilePath",
          "dataDir": "$FlannelDataDir",
          "delegate": {
            "hairpinMode": true,
            "isDefaultGateway": true
          }
        },
        {
          "type": "portmap",
          "capabilities": {
            "portMappings": true
          }
        }
      ]
    }
    "@
    } else {
      Set-Content -Path $FlannelConfPath -Value `
    @"
    {
      "name": "flannel.4096",
      "cniVersion": "1.0.0",
      "plugins": [
        {
          "type": "flannel",
          "subnetFile": "$($SubnetFilePath.Replace("\", "\\"))",
          "dataDir": "$($FlannelDataDir.Replace("\", "\\"))",
          "capabilities": {
            "portMappings": true,
            "dns": true
          },
          "delegate": {
            "type": "win-overlay",
            "apiVersion": 2,
            "Policies": [
              {
                "Name": "EndpointPolicy",
                "Value": {
                  "Type": "OutBoundNAT",
                  "Settings": {
                    "Exceptions": ["{{ .Values.cluster.cidr }}", "{{ .Values.cluster.serviceCidr }}"]
                  }
                }
              },
              {
                "Name": "EndpointPolicy",
                "Value": {
                  "Type": "SDNRoute",
                  "Settings": {
                    "DestinationPrefix": "{{ .Values.cluster.serviceCidr }}",
                    "NeedEncap": true
                  }
                }
              },
              {
                "name": "EndpointPolicy",
                "value": {
                  "Type": "ProviderAddress",
                  "Settings": {
                    "ProviderAddress": "$env:IP"
                  }
                }
              }
            ]
          }
        }
      ]
    }
    "@
    }

    if ($global:IsLinux) {
      Write-Host "Installing iptables if needed..."
      if ($null -eq (Get-Command -ErrorAction SilentlyContinue iptables)) {
        apt-get update
        if ($LastExitCode -ne 0) {
          exit $LastExitCode
        }
        apt-get install iptables -y
        if ($LastExitCode -ne 0) {
          exit $LastExitCode
        }
      }
    }

    $FlanneldArgs = @()
    if (!$global:IsLinux) {
      $FlanneldArgs = @(
        "--iptables-forward-rules=false"
      )
    }

    & "$FlanneldPath" `
      --kubeconfig-file=$KubeconfigPath `
      --ip-masq `
      --kube-subnet-mgr `
      $FlanneldArgs `
      "--iface=$env:IP" `
      "--net-config-path=$NetConfPath" `
      "--subnet-file=$SubnetFilePath"
    exit $LastExitCode