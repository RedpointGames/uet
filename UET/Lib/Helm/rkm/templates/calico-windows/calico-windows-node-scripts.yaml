kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ printf "calico-windows-node-scripts-%d" .Release.Revision | quote }}
  namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    rkm.redpoint.games/component: calico-windows-node
data:
  # note: We should try to get the active install via Kubernetes metadata...
  install_pwsh.ps1: |
    if (!(Test-Path "C:\Program Files\PowerShell\7\pwsh.exe")) {
      Write-Host "Pwsh needs to be installed!"
      Write-Host "Downloading Powershell..."
      curl.exe -L -o pwsh.zip "https://github.com/PowerShell/PowerShell/releases/download/v7.5.2/PowerShell-7.5.2-win-x64.zip"
      Write-Host "Extracting Powershell..."
      Expand-Archive -Path pwsh.zip -DestinationPath 'C:\Program Files\PowerShell\7'
    }

    if (!(Test-Path "C:\Program Files\PowerShell\7\pwsh.exe")) {
      Write-Host "Failed to install PowerShell."
      exit 1
    }
  startup_script.ps1: |
    $global:ErrorActionPreference = 'Stop';
    $global:ProgressPreference = 'SilentlyContinue';

    $ActiveInstall = (Get-Content -Raw -Path C:\RKM\active).Trim()

    $CalicoFolder = "C:\RKM\$ActiveInstall\calico-container\calico-${env:UET_CALICO_VERSION}"
    $CniDownloadFolder = "C:\RKM\$ActiveInstall\calico-container\cni-${env:UET_CNI_PLUGINS_VERSION}"
    $SdnFolder = "C:\RKM\$ActiveInstall\calico-container\sdn-${env:UET_SDN_VERSION}"

    $KubeCaCrtUnencoded = (Get-Content -Raw -Path var\run\secrets\kubernetes.io\serviceaccount\ca.crt)
    $KubeCaCrt = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($KubeCaCrtUnencoded))
    $KubeToken = (Get-Content -Raw -Path var\run\secrets\kubernetes.io\serviceaccount\token)

    Write-Host "Setting up environment variables..."
    $env:CNI_BIN_DIR = "$CniDownloadFolder"
    $env:CNI_CONF_DIR = "C:\RKM\$ActiveInstall\containerd-state\cni\conf"
    $env:CALICO_LOG_DIR = "C:\RKM\$ActiveInstall\logs\calico"

    $Downloads = @(
      @{
        Name = "calico-windows.zip";
        Url = "https://github.com/projectcalico/calico/releases/download/v${env:UET_CALICO_VERSION}/calico-windows-v${env:UET_CALICO_VERSION}.zip";
        Folder = $CalicoFolder;
      },
      @{
        Name = "cni-plugins.tar.gz";
        Url = "https://github.com/containernetworking/plugins/releases/download/v${env:UET_CNI_PLUGINS_VERSION}/cni-plugins-windows-amd64-v${env:UET_CNI_PLUGINS_VERSION}.tgz";
        Folder = $CniDownloadFolder;
      },
      @{
        Name = "windows-cni.zip";
        Url = "https://github.com/microsoft/windows-container-networking/releases/download/v${env:UET_SDN_VERSION}/windows-container-networking-cni-amd64-v${env:UET_SDN_VERSION}.zip";
        Folder = $SdnFolder;
      }
    )

    Write-Host "Downloading dependencies..."
    foreach ($Download in $Downloads) {
      if (Test-Path "$($Download.Folder)\done") {
        Write-Host "Already downloaded: $($Download.Folder)"
        continue
      }

      if (Test-Path "$($Download.Folder)") {
        Remove-Item -Force -Recurse "$($Download.Folder)"
      }
      if (Test-Path "$($Download.Folder).tmp") {
        Remove-Item -Force -Recurse "$($Download.Folder).tmp"
      }

      Write-Host "Downloading '$($Download.Name)' from '$($Download.Url)' ..."
      Invoke-WebRequest -OutFile $Download.Name $Download.Url

      Write-Host "Expanding '$($Download.Name)' to '$($Download.Folder).tmp' ..."
      if ($Download.Name.EndsWith(".tar.gz")) {
        New-Item -ItemType Directory -Path "$($Download.Folder).tmp"
        $FullPath = "$((Get-Location).Path)\$($Download.Name)"
        Push-Location "$($Download.Folder).tmp"
        try {
          & "tar.exe" -xvf $FullPath
          if ($LastExitCode -ne 0) {
            exit $LastExitCode
          }
        } finally {
          Pop-Location
        }
      } else {
        Expand-Archive -Path $Download.Name -DestinationPath "$($Download.Folder).tmp"
      }

      Write-Host "Moving '$($Download.Folder).tmp' to '$($Download.Folder)' ..."
      Move-Item "$($Download.Folder).tmp" "$($Download.Folder)"
      Set-Content -NoNewline -Path "$($Download.Folder)\done" -Value "done"
    }

    Write-Host "Copying files to CNI plugins folder '$CniDownloadFolder'..."
    Copy-Item -Force $SdnFolder\nat.exe $CniDownloadFolder\nat.exe
    Copy-Item -Force $SdnFolder\sdnbridge.exe $CniDownloadFolder\sdnbridge.exe
    Copy-Item -Force $SdnFolder\sdnoverlay.exe $CniDownloadFolder\sdnoverlay.exe
    Copy-Item -Force $CalicoFolder\CalicoWindows\cni\calico.exe $CniDownloadFolder\calico.exe
    Copy-Item -Force $CalicoFolder\CalicoWindows\cni\calico-ipam.exe $CniDownloadFolder\calico-ipam.exe

    Write-Host "Reconciling '$CniDownloadFolder' to 'C:\RKM\$ActiveInstall\cni-plugins'..."
    if (Test-Path "C:\RKM\$ActiveInstall\cni-plugins") {
      foreach ($File in (Get-ChildItem -Path "C:\RKM\$ActiveInstall\cni-plugins")) {
        if (!(Test-Path "$($CniDownloadFolder)\$($File.Name)")) {
          Write-Host "Removing unexpected file '$($File.FullName)'..."
          Remove-Item -Force -Path $File.FullName
        }
      }
    } else {
      New-Item -ItemType Directory -Path "C:\RKM\$ActiveInstall\cni-plugins"
    }
    foreach ($File in (Get-ChildItem -Path "$($CniDownloadFolder)")) {
      if ($File.Name -eq "done") {
        continue
      }
      Write-Host "Copying '$($File.FullName)' to 'C:\RKM\$ActiveInstall\cni-plugins\$($File.Name)'..."
      Copy-Item -Force "$($File.FullName)" "C:\RKM\$ActiveInstall\cni-plugins\$($File.Name)"
    }

    Write-Host "Trying to resolve own hostname to IP address..."
    while ($true) {
      $Addresses = @()
      try {
        $Addresses = ([System.Net.Dns]::GetHostEntry([System.Net.Dns]::GetHostName()).AddressList | ? { $_.AddressFamily -eq "InterNetwork" } | ? { $B = $_.GetAddressBytes(); !($B[0] -eq 127 -or $B[0] -eq 172 -or ($B[0] -eq 169 -and $B[1] -eq 254)) })
      } catch {
      }
      if ($Addresses.Length -eq 0) {
        Start-Sleep -Seconds 1
        Write-Host "Unable to resolve own hostname, retrying in 1 second..."
        continue
      }
      $env:IP = $Addresses[0].IPAddressToString
      Write-Host "Detected IP address as $env:IP"
      break
    }

    Write-Host "Writing out nodename file, which is necessary for non-HostProcess containers to be scheduled."
    Set-Content -NoNewline -Path "C:\RKM\$ActiveInstall\calico-container\nodename" -Value $env:NODENAME

    Write-Host "Writing out kubeconfig file, which must persist for CNI plugin to work."
    $env:KUBECONFIG = "C:\RKM\$ActiveInstall\calico-container\kubeconfig"
    Set-Content -NoNewline -Path $env:KUBECONFIG -Value `
    @"
    # last synchronised $(Get-Date)
    apiVersion: v1
    kind: Config
    clusters:
    - name: default-cluster
      cluster:
        certificate-authority-data: $KubeCaCrt
        server: https://${env:UET_CONTROLLER_IP}:6443
    contexts:
    - name: default-context
      context:
        cluster: default-cluster
        namespace: default
        user: default-user
    current-context: default-context
    users:
    - name: default-user
      user:
        token: $KubeToken
    "@

    Write-Host "Writing contents of 'C:\RKM\$ActiveInstall\containerd-state\cni\conf\10-calico.conf' for containerd CNI..."
    if (!(Test-Path "C:\RKM\$ActiveInstall\containerd-state\cni\conf")) {
      New-Item -ItemType Directory -Path "C:\RKM\$ActiveInstall\containerd-state\cni\conf"
    }
    Set-Content -NoNewline -Path "C:\RKM\$ActiveInstall\containerd-state\cni\conf\10-calico.conf" -Value `
    @"
    {
      "type": "calico",
      "name": "Calico",
      "windows_use_single_network": true,

      "cniVersion": "0.3.1",
      "mode": "${env:CALICO_NETWORKING_BACKEND}",

      "vxlan_mac_prefix": "${env:UET_CNI_VXLAN_MAC_PREFIX}",
      "vxlan_vni": ${env:FELIX_VXLANVNI},

      "policy": {
        "type": "k8s"
      },

      "log_file_path": "C:/RKM/$ActiveInstall/logs/cni.log",
      "log_level": "info",

      "windows_loopback_DSR": false,

      "capabilities": {"dns": true},

      "DNS":  {
        "Nameservers":  ["${env:UET_CNI_DNS_NAME_SERVERS}"],
        "Search":  [
          "svc.${env:UET_CNI_DNS_SEARCH}"
        ]
      },

      "nodename_file": "$("C:\RKM\$ActiveInstall\calico-container\nodename".Replace("\", "\\"))",

      "datastore_type": "kubernetes",

      "kubernetes": {
        "kubeconfig": "$($env:KUBECONFIG.Replace("\", "\\"))"
      },

      "ipam": {
        "type": "${env:UET_CNI_IPAM_TYPE}",
        "subnet": "usePodCidr"
      },

      "policies":  [
        {
          "Name":  "EndpointPolicy",
          "Value":  {
            "Type":  "OutBoundNAT",
            "ExceptionList":  [
              "${env:UET_CNI_K8S_SERVICE_CIDR}"
            ]
          }
        },
        {
          "Name":  "EndpointPolicy",
          "Value":  {
            "Type":  "SDNROUTE",
            "DestinationPrefix":  "${env:UET_CNI_K8S_SERVICE_CIDR}",
            "NeedEncap":  true
          }
        }
      ]
    }
    "@

    Write-Host "Running 'calico-node -startup'..."
    & "$CalicoFolder\CalicoWindows\calico-node.exe" -startup
    return $LastExitCode
  felix_script.ps1: |
    $global:ErrorActionPreference = 'Stop';
    $global:ProgressPreference = 'SilentlyContinue';

    $ActiveInstall = (Get-Content -Raw -Path C:\RKM\active).Trim()

    $CalicoFolder = "C:\RKM\$ActiveInstall\calico-container\calico-${env:UET_CALICO_VERSION}"

    $KubeCaCrtUnencoded = (Get-Content -Raw -Path var\run\secrets\kubernetes.io\serviceaccount\ca.crt)
    $KubeCaCrt = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($KubeCaCrtUnencoded))
    $KubeToken = (Get-Content -Raw -Path var\run\secrets\kubernetes.io\serviceaccount\token)

    Write-Host "Setting up environment variables..."
    $env:CNI_BIN_DIR = "C:\RKM\$ActiveInstall\cni-plugins"
    $env:CNI_CONF_DIR = "C:\RKM\$ActiveInstall\containerd-state\cni\conf"
    $env:CALICO_LOG_DIR = "C:\RKM\$ActiveInstall\logs\calico"

    # The init container and sidecar container will ensure this is kept up-to-date.
    $env:KUBECONFIG = "C:\RKM\$ActiveInstall\calico-container\kubeconfig"

    # Change the network profile to Private before felix but after init.
    Write-Host "Attempting to change network profile to Private..."
    try {
      Set-NetConnectionProfile -Name "Network" -NetworkCategory Private
    }
    catch {
    }

    Write-Host "Running 'calico-node -felix'..."
    & "$CalicoFolder\CalicoWindows\calico-node.exe" -felix
    return $LastExitCode
  sync_kubeconfig.ps1: |
    $global:ErrorActionPreference = 'Stop';
    $global:ProgressPreference = 'SilentlyContinue';

    $ActiveInstall = (Get-Content -Raw -Path C:\RKM\active).Trim()

    while ($true) {
      Write-Host "Syncing kubeconfig for Calico on Windows..."

      $KubeCaCrtUnencoded = (Get-Content -Raw -Path var\run\secrets\kubernetes.io\serviceaccount\ca.crt)
      $KubeCaCrt = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($KubeCaCrtUnencoded))
      $KubeToken = (Get-Content -Raw -Path var\run\secrets\kubernetes.io\serviceaccount\token)

      $env:KUBECONFIG = "C:\RKM\$ActiveInstall\calico-container\kubeconfig"
      Set-Content -NoNewline -Path $env:KUBECONFIG -Value `
    @"
    # last synchronised $(Get-Date)
    apiVersion: v1
    kind: Config
    clusters:
    - name: default-cluster
      cluster:
        certificate-authority-data: $KubeCaCrt
        server: https://${env:UET_CONTROLLER_IP}:6443
    contexts:
    - name: default-context
      context:
        cluster: default-cluster
        namespace: default
        user: default-user
    current-context: default-context
    users:
    - name: default-user
      user:
        token: $KubeToken
    "@

      # Change the network profile to Private so that kube-proxy can work. We do this
      # in the loop here because Calico can reconfigure the network after it starts.
      Write-Host "Attempting to change network profile to Private..."
      try {
        Set-NetConnectionProfile -Name "Network" -NetworkCategory Private
      }
      catch {
      }

      # Tokens expire every day, so refresh every hour
      Start-Sleep -Seconds 3600
    }

    return 0