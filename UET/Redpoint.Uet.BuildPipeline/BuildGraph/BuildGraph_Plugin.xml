<?xml version='1.0' ?>
<BuildGraph xmlns="http://www.epicgames.com/BuildGraph" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.epicgames.com/BuildGraph ./Schema.xsd" >

  <!-- Environment options -->
  <Option Name="UETPath" DefaultValue="" Description="Path to the UET binary" />
  <Option Name="UETGlobalArgs" DefaultValue="" Description="Global arguments to pass to the UET binary" />
  <Option Name="EnginePath" DefaultValue="" Description="Path to the engine" />
  <Option Name="TempPath" DefaultValue="" Description="Path to the temporary directory (must not contain spaces)" />
  <Option Name="ProjectRoot" DefaultValue="" Description="Root path of the project (repository)" />
  <Option Name="ArtifactExportPath" DefaultValue="" Description="Root path under which to export artifacts such as test results" />

  <!-- General options -->
  <Option Name="PluginDirectory" DefaultValue="" Description="Path to the directory that contains the .uplugin" />
  <Option Name="PluginName" Restrict="[^ ]+" DefaultValue="NotSet" Description="Name of the plugin (the .uplugin filename without the extension)" />
  <Option Name="Distribution" Restrict="[^ ]*" DefaultValue="" Description="The distribution being built" />
  <Option Name="IsUnrealEngine5" Restrict="true|false" DefaultValue="false" Description="If true, this is an Unreal Engine 5 plugin" />

  <!-- Clean options -->
  <Option Name="CleanDirectories" DefaultValue="" Description="Semicolon separated list of folders and files to delete after copying the plugin into the host project" />

  <!-- Build options -->
  <Option Name="EditorTargetPlatforms" Restrict="[^ ]*" DefaultValue="" Description="List of the editor target platforms to build for, separated by semicolons, eg. Win64;Mac"/>
  <Option Name="GameTargetPlatforms" Restrict="[^ ]*" DefaultValue="" Description="List of the game target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="GameConfigurations" Restrict="[^ ]*" DefaultValue="" Description="List of configurations to build the game targets for, e.g. Development;Shipping" />
  <Option Name="ClientTargetPlatforms" Restrict="[^ ]*" DefaultValue="" Description="List of the client target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="ClientConfigurations" Restrict="[^ ]*" DefaultValue="" Description="List of configurations to build the client targets for, e.g. Development;Shipping" />
  <Option Name="ServerTargetPlatforms" Restrict="[^ ]*" DefaultValue="" Description="List of the server target platforms to build for, separated by semicolons, eg. Win64;Linux"/>
  <Option Name="ServerConfigurations" Restrict="[^ ]*" DefaultValue="" Description="List of configurations to build the server targets for, e.g. Development;Shipping" />
  <Option Name="MacPlatforms" Restrict="[^ ]*" DefaultValue="Mac;IOS" Description="List of platforms that macOS agents should build instead of Windows, e.g. Mac;IOS" />
  <Option Name="StrictIncludes" Restrict="true|false" DefaultValue="false" Description="If enabled, builds with strict includes turned on (must pass strict include checks for Marketplace/Fab submission)" />
  <Option Name="EnginePrefix" Restrict="UE4|Unreal" DefaultValue="UE4" Description="Prefix of the engine targets (UE5 has a different prefix)" />
  <Option Name="Allow2019" Restrict="true|false" DefaultValue="false" Description="If true, the plugin will be built with the latest version of Visual Studio, instead of Visual Studio 2017" />
  <Option Name="ExecuteBuild" Restrict="true|false" DefaultValue="true" Description="If false, no build steps are run (currently ignored)" />

  <!-- Package options -->
  <Option Name="ExecutePackage" Restrict="true|false" DefaultValue="true" Description="If false, the default Create Package and Zip Plugin steps are not run" />
  <Option Name="ExecuteZip" Restrict="true|false" DefaultValue="true" Description="If false, the Create Package step will not generate a .zip file" />
  <Option Name="VersionNumber" Restrict="[0-9]+" DefaultValue="10000" Description="The version number to embed in the packaged .uplugin file" />
  <Option Name="VersionName" Restrict="[^ ]+" DefaultValue="Unversioned" Description="The version name to embed in the packaged .uplugin file" />
  <Option Name="PackageFolder" Restrict="[^ ]+" DefaultValue="Packaged" Description="The folder to place the packaged plugin in" />
  <Option Name="PackageInclude" DefaultValue="" Description="Additional include filespec to apply when packaging, separated by semicolons" />
  <Option Name="PackageExclude" DefaultValue="" Description="Additional exclude filespec to apply when packaging, separated by semicolons" />
  <Option Name="CopyrightHeader" DefaultValue="" Description="Copyright header to apply to all source code files when packaging" />
  <Option Name="CopyrightExcludes" DefaultValue="" Description="Relative paths inside the package to exclude from copyright updates, separated with semicolons" />
  <Option Name="PackageType" Restrict="Generic|Marketplace|Fab" DefaultValue="Generic" Description="Defines the method of distribution for the produced plugin." />

  <!-- Test options -->
  <Option Name="GauntletConfigPaths" Restrict="[^ ]*" DefaultValue="" Description="List of the paths to copy files out of into the Config/ folder before building the project for Gauntlet tests."/>

  <!-- Debug options -->
  <Option Name="HostProjectName" DefaultValue="H" Description="Name for the host project folder and .uproject file" />

  <!-- Dynamic scripts to include, used by UET to dynamically generate test and deployment nodes -->
  <Option Name="ScriptNodeIncludes" DefaultValue="" Description="Additional script includes paths for nodes" />
  <Option Name="ScriptMacroIncludes" DefaultValue="" Description="Additional script includes paths for macros" />

  <Property Name="2017Flag" Value="-2017" />
  <Property Name="2017Flag" Value="" If="'$(Allow2019)' == 'true'" />
  <Property Name="EditorBinaries" Value="" />
  <Property Name="GameBinaries" Value="" />
  <Property Name="AdditionalArguments" Value=" -DisableAdaptiveUnity" If="'$(StrictIncludes)' == 'false'" />
  <Property Name="AdditionalArguments" Value=" -NoPCH -NoSharedPCH -DisableUnity" If="'$(StrictIncludes)' == 'true'" />
  <Property Name="BuildTasks" Value="" />
  <Property Name="PackageTasks" Value="" />
  <Property Name="ShortPluginName" Value="P" />
  <Property Name="CanBuildEditorWin64" Value="false" />
  <Property Name="CanBuildEditorMac" Value="false" />
  <ForEach Name="EditorTargetPlatform" Values="$(EditorTargetPlatforms)">
    <Property Name="CanBuildEditorWin64" Value="true" If="'$(EditorTargetPlatform)' == 'Win64'" />
    <Property Name="CanBuildEditorMac" Value="true" If="'$(EditorTargetPlatform)' == 'Mac'" />
  </ForEach>
  <Property Name="DynamicNodes" Value="" />
  <Property Name="DynamicOutputFiles" Value="" />
  <Property Name="DynamicPreDeploymentNodes" Value="" />
  <Property Name="DynamicBeforeAssembleFinalizeMacros" Value="" />
  <Property Name="DynamicBeforeCompileMacros" Value="" />

  <!-- 
    Include all the macros dynamically defined by UET.
  -->

  <Include Script="$(ScriptMacroIncludes)" />

  <!--
    Workaround an issue where PCH files are incorrectly re-used even when the engine version changes.
  -->
  <Macro Name="RemoveStalePrecompiledHeaders" Arguments="ProjectPath;TargetName;TargetPlatform;TargetConfiguration">
    <Spawn Exe="$(UETPath)" Arguments="$(UETGlobalArgs) internal remove-stale-precompiled-headers --engine-path &quot;$(EnginePath)&quot; --project-path &quot;$(ProjectPath)&quot; --target-name &quot;$(TargetName)&quot; --target-platform &quot;$(TargetPlatform)&quot; --target-configuration &quot;$(TargetConfiguration)&quot;" />
  </Macro>

  <!--
    Define the macro for creating packages. This macro emits a node (so you don't need a <Node /> around it),
    and it can be used to package up a plugin for consumption by other steps.
  -->

  <Macro Name="Create Package" Arguments="NodeName;AgentStage;AgentType;InputProject;InputBaseDir;InputBinaries;OutputDir;OutputTag">
    <Agent Name="$(NodeName) ($(AgentStage))" Type="$(AgentType)">
      <Node Name="$(NodeName)" Requires="$(InputProject);$(InputBinaries)" Produces="$(OutputTag)">
        <Delete Files="$(OutputDir)/..." />
        <!--
          This tag does not match:
            /Binaries/ThirdParty/...;
            /Intermediate/Build/.../Inc/...;
          like in BuildPlugin, because the workspace might have been reused from a non-Marketplace
          build before, we don't want to include any build artifacts that we didn't explicitly build
          ourselves.
        -->
        <Tag
          BaseDir="$(InputBaseDir)"
          Files="$(InputProject)"
          Filter="
/Resources/...;
/Content/...;
/Shaders/...;
/Source/...;
$(PackageInclude)
"
          Except="
$(RestrictedFolderFilter);
/Source/.../*.Build.cs;
$(PackageExclude);
.../.git;
.../.git/...;
LICENSE;
LICENSE.md
"
          With="#DirectCopyFiles"
        />
        <Tag
          BaseDir="$(InputBaseDir)"
          Files="$(InputBinaries)"
          Except="
$(RestrictedFolderFilter);
$(PackageExclude);
.../.git;
.../.gitcheckout;
.../.git/...;
LICENSE;
LICENSE.md
"
          With="#DirectCopyFiles"
        />
        <Tag
          BaseDir="$(InputBaseDir)"
          Files="$(InputProject)"
          Filter="
/Source/.../*.Build.cs;
"
          Except="
$(RestrictedFolderFilter);
$(PackageExclude);
.../.git;
.../.gitcheckout;
.../.git/...
"
          With="#BuildCsList"
        />
        <WriteTextFile
          File="$(TempPath)/BuildCsList.txt"
          Files="#BuildCsList"
        />
        <Spawn Exe="$(UETPath)" Arguments="$(UETGlobalArgs) internal update-uplugin --input-path &quot;$(InputBaseDir)/$(PluginName).uplugin&quot; --output-path &quot;$(OutputDir)/$(PluginName).uplugin&quot; --engine-version &quot;$(EngineMajorVersion).$(EngineMinorVersion).0&quot; --version-name &quot;$(VersionName)&quot; --version-number &quot;$(VersionNumber)&quot; --package-type &quot;$(PackageType)&quot;" />
        <Spawn Exe="$(UETPath)" Arguments="$(UETGlobalArgs) internal copy-and-mutate-build-cs --input-base-path &quot;$(InputBaseDir)/&quot; --input-file-list &quot;$(TempPath)/BuildCsList.txt&quot; --output-path &quot;$(OutputDir)/&quot; --package-type &quot;$(PackageType)&quot;" />
        <Spawn Exe="$(UETPath)" Arguments="$(UETGlobalArgs) internal set-filter-file --package-include &quot;$(PackageInclude)&quot; --package-exclude &quot;$(PackageExclude)&quot; --output-path &quot;$(OutputDir)/Config/FilterPlugin.ini&quot;" />
        <Copy
          From="$(InputBaseDir)"
          To="$(OutputDir)"
          Files="#DirectCopyFiles"
          Tag="$(OutputTag)"
        />
        <Spawn Exe="$(UETPath)" Arguments="$(UETGlobalArgs) internal update-copyright-headers-for-submission --path &quot;$(OutputDir)&quot; --copyright-header &quot;$(CopyrightHeader)&quot; --copyright-excludes &quot;$(CopyrightExcludes)&quot;" If="'$(PackageType)' != 'Generic'" />
        <Tag
          Files="$(OutputDir)/$(PluginName).uplugin"
          With="$(OutputTag)"
        />
        <Tag
          Files="$(OutputDir)/Config/FilterPlugin.ini"
          With="$(OutputTag)"
        />
        <Tag
          BaseDir="$(OutputDir)/"
          Files="..."
          Filter="
/Source/.../*.Build.cs;
"
          With="$(OutputTag)"
        />
      </Node>
    </Agent>
  </Macro>

  <!--
    Define the macro for creating a test project from a given package. We might want to create multiple
    test projects for all our package variants (automation, non-automation, submission, etc.)

    This macro emits a node (so you don't need a <Node /> around it).
  -->

  <Macro Name="Assemble Test Project" Arguments="NodeName;AgentStage;AgentType;AssembledProjectName;InputFiles;InputPackageDir;OutputTag;IsForGauntlet"
         OptionalArguments="InputProjectFilesPath">
    <Agent Name="$(NodeName) ($(AgentStage))" Type="$(AgentType)">
      <Node Name="$(NodeName)" Requires="$(InputFiles)" Produces="$(OutputTag)">
        <WriteTextFile
          File="$(TempPath)/$(AssembledProjectName)/$(AssembledProjectName).uproject"
          Text="{ &quot;FileVersion&quot;: 3, &quot;Plugins&quot;: [ { &quot;Name&quot;: &quot;$(PluginName)&quot;, &quot;Enabled&quot;: true } ] }"
          If="'$(IsForGauntlet)' != 'true'"
        />
        <WriteTextFile
          File="$(TempPath)/$(AssembledProjectName)/$(AssembledProjectName).uproject"
          Text="{ &quot;FileVersion&quot;: 3, &quot;Plugins&quot;: [ { &quot;Name&quot;: &quot;$(PluginName)&quot;, &quot;Enabled&quot;: true }, { &quot;Name&quot;: &quot;Gauntlet&quot;, &quot;Enabled&quot;: true } ] }"
          If="'$(IsForGauntlet)' == 'true'"
        />
        <Tag
          Files="$(TempPath)/$(AssembledProjectName)/$(AssembledProjectName).uproject"
          With="$(OutputTag)"
        />
        <ForEach Name="GauntletConfigPath" Values="$(GauntletConfigPaths)">
          <Copy
            Files="..."
            From="$(ProjectRoot)/$(GauntletConfigPath)/"
            To="$(TempPath)/$(AssembledProjectName)/Config/"
            Tag="$(OutputTag)"
            If="'$(IsForGauntlet)' == 'true'"
          />
        </ForEach>
        <Copy
          Files="$(InputFiles)"
          From="$(InputPackageDir)/"
          To="$(TempPath)/$(AssembledProjectName)/Plugins/$(ShortPluginName)/"
          Tag="$(OutputTag)"
        />
        <Copy
          Files="..."
          From="$(ProjectRoot)/$(InputProjectFilesPath)/"
          To="$(TempPath)/$(AssembledProjectName)/"
          Tag="$(OutputTag)"
          If="'$(InputProjectFilesPath)' != ''"
        />
        <WriteTextFile
          File="$(TempPath)/$(AssembledProjectName)/Config/DefaultGame.ini"
          Text="&#13;&#10;&#13;&#10;[/Script/UnrealEd.ProjectPackagingSettings]&#13;&#10;BuildTarget=$(AssembledProjectName)"
          Append="true"
        />
        <WriteTextFile
          File="$(TempPath)/$(AssembledProjectName)/Source/$(AssembledProjectName).Target.cs"
          Text="using UnrealBuildTool; public class $(AssembledProjectName)Target : TargetRules { public $(AssembledProjectName)Target(TargetInfo Target) : base(Target) { Type = TargetType.Game; DefaultBuildSettings = BuildSettingsVersion.Latest; IncludeOrderVersion = EngineIncludeOrderVersion.Latest; ExtraModuleNames.AddRange(new string[] { &quot;$(AssembledProjectName)&quot; }); } }"
          If="'$(IsForGauntlet)' == 'true'"
        />
        <WriteTextFile
          File="$(TempPath)/$(AssembledProjectName)/Source/$(AssembledProjectName)Editor.Target.cs"
          Text="using UnrealBuildTool; public class $(AssembledProjectName)EditorTarget : TargetRules { public $(AssembledProjectName)EditorTarget(TargetInfo Target) : base(Target) { Type = TargetType.Editor; DefaultBuildSettings = BuildSettingsVersion.Latest; IncludeOrderVersion = EngineIncludeOrderVersion.Latest; ExtraModuleNames.AddRange(new string[] { &quot;$(AssembledProjectName)&quot; }); } }"
          If="'$(IsForGauntlet)' == 'true'"
        />
        <WriteTextFile
          File="$(TempPath)/$(AssembledProjectName)/Source/$(AssembledProjectName)/$(AssembledProjectName).Build.cs"
          Text="using UnrealBuildTool; public class $(AssembledProjectName) : ModuleRules { public $(AssembledProjectName)(ReadOnlyTargetRules Target) : base(Target) { PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs; PublicDependencyModuleNames.AddRange(new string[] { &quot;Core&quot;, &quot;CoreUObject&quot;, &quot;Engine&quot;, &quot;InputCore&quot; }); PrivateDependencyModuleNames.AddRange(new string[] { &quot;Gauntlet&quot;, &quot;AutomationController&quot; }); } }"
          If="'$(IsForGauntlet)' == 'true'"
        />
        <WriteTextFile
          File="$(TempPath)/$(AssembledProjectName)/Source/$(AssembledProjectName)/$(AssembledProjectName)Module.cpp"
          Text="#include &quot;Modules/ModuleManager.h&quot;&#10;IMPLEMENT_PRIMARY_GAME_MODULE(FDefaultGameModuleImpl, $(AssembledProjectName), &quot;$(AssembledProjectName)&quot;);"
          If="'$(IsForGauntlet)' == 'true'"
        />
        <Tag
          Files="$(TempPath)/$(AssembledProjectName)/Source/$(AssembledProjectName).Target.cs;$(TempPath)/$(AssembledProjectName)/Source/$(AssembledProjectName)Editor.Target.cs;$(TempPath)/$(AssembledProjectName)/Source/$(AssembledProjectName)/$(AssembledProjectName).Build.cs;$(TempPath)/$(AssembledProjectName)/Source/$(AssembledProjectName)/$(AssembledProjectName)Module.cpp"
          With="$(OutputTag)"
          If="'$(IsForGauntlet)' == 'true'"
        />
      </Node>
    </Agent>
  </Macro>

  <!--

    =========================================================================
    =
    = >> Editor level builds and testing
    =
    = In order to run automation tests and to run custom tests against the
    = "test project", all we need is:
    =
    = * The editor binaries for the plugin
    = * The test project generated for relevant platforms (windows/mac)
    = 
    = This is far less than required to actually package the plugin, and by
    = separating "editor only" build components from the full plugin build,
    = we can start the automation tests much earlier than we otherwise would.
    =
    = Refer to "Package builds and testing" to see where we compile the
    = plugin for game/client/server targets and where we run tests that
    = require the full packaged plugin (inc. custom tests against
    = PackagedPlugin and Gauntlet tests).
    = 
    =========================================================================

  -->

  <!--
    Assemble the host project that we will use to build the plugin. All build steps require this because
    they need a project in order to provide a build context when compiling.
  -->

  <Agent Name="Assemble Host Project (Assemble Host Project)" Type="Win64">
    <Node Name="Assemble Host Project" Produces="#HostProject">
      <WriteTextFile
        File="$(TempPath)/$(HostProjectName)/$(HostProjectName).uproject"
        Text="{ &quot;FileVersion&quot;: 3, &quot;Plugins&quot;: [ { &quot;Name&quot;: &quot;$(PluginName)&quot;, &quot;Enabled&quot;: true } ] }"
      />
      <Tag
        Files="$(TempPath)/$(HostProjectName)/$(HostProjectName).uproject"
        With="#HostProject"
      />
      <Tag
        BaseDir="$(PluginDirectory)"
        Files="..."
        Filter="
/Config/...;
/Content/...;
/Resources/...;
/Source/...;
"
        Except="
.../.git;
.../.gitcheckout;
.../.git/...
"
        With="#CopyForHostProject"
      />
      <Copy From="$(PluginDirectory)/..." Files="#CopyForHostProject" To="$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)/" Tag="#HostProject" />
      <Copy From="$(PluginDirectory)/$(PluginName).uplugin" To="$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)/$(PluginName).uplugin" Tag="#HostProject" />
      <ForEach Name="CleanDirectory" Values="$(CleanDirectories)">
        <Log Message="Cleaning filespec: $(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)/$(CleanDirectory)" />
        <Delete Files="$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)/$(CleanDirectory)" />
      </ForEach>
      <ForEach Name="MacroName" Values="$(DynamicBeforeAssembleFinalizeMacros)">
        <Expand Name="$(MacroName)" PackagePath="$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)" />
      </ForEach>
      <Log
        Message="Tagging all files under Source, Content, Resources and Source folders for the #HostProject because you have custom assembly finalize scripts specified."
        If="'$(DynamicBeforeAssembleFinalizeMacros)' != ''"
      />
      <Tag
        BaseDir="$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)"
        Files="..."
        Filter="
/Config/...;
/Content/...;
/Resources/...;
/Source/...;
"
        Except="
.../.git;
.../.gitcheckout;
.../.git/...
"
        With="#HostProject"
        If="'$(DynamicBeforeAssembleFinalizeMacros)' != ''"
      />
    </Node>
  </Agent>

  <!-- 
    Build the editors first, if needed. These will feed into the packages we used for automation testing
    (which aren't the full packages since they won't contain game binaries - only the editor binaries
    are required for automation testing).
  -->

  <Agent Name="Compile $(EnginePrefix)Editor Mac (Mac Build Editor)" Type="Mac" If="'$(IsBuildMachine)' == 'true'">
    <Node Name="Compile $(EnginePrefix)Editor Mac" Requires="#HostProject" Produces="#EditorBinaries_Mac" If="'$(PackageType)' == 'Generic' and '$(CanBuildEditorMac)' == 'true'">
      <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
        <Expand Name="$(MacroName)" TargetType="Editor" TargetName="$(EnginePrefix)Editor" TargetPlatform="Mac" TargetConfiguration="Development" HostPlatform="Mac" />
      </ForEach>
      <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(TempPath)/$(HostProjectName)" TargetName="$(EnginePrefix)Editor" TargetPlatform="Mac" TargetConfiguration="Development" />
      <Compile Target="$(EnginePrefix)Editor" Platform="Mac" Configuration="Development" Tag="#EditorBinaries_Mac" Arguments="-Project=&quot;$(TempPath)/$(HostProjectName)/$(HostProjectName).uproject&quot; -plugin=&quot;$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)/$(PluginName).uplugin&quot; -NoPDB -NoDebugInfo $(AdditionalArguments)"/>
    </Node>
    <Property Name="EditorBinaries" Value="$(EditorBinaries)#EditorBinaries_Mac;" If="'$(PackageType)' == 'Generic' and '$(CanBuildEditorMac)' == 'true'" />
    <Property Name="BuildTasks" Value="$(BuildTasks)Compile $(EnginePrefix)Editor Mac;" If="'$(ExecutePackage)' == 'false' and '$(PackageType)' == 'Generic' and '$(CanBuildEditorMac)' == 'true'" />
  </Agent>

  <Agent Name="Compile $(EnginePrefix)Editor Win64 (Windows Build Editor)" Type="Win64">
    <Node Name="Compile $(EnginePrefix)Editor Win64" Requires="#HostProject" Produces="#EditorBinaries_Win64" If="'$(PackageType)' == 'Generic' and '$(CanBuildEditorWin64)' == 'true'">
      <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
        <Expand Name="$(MacroName)" TargetType="Editor" TargetName="$(EnginePrefix)Editor" TargetPlatform="Win64" TargetConfiguration="Development" HostPlatform="Win64" />
      </ForEach>
      <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(TempPath)/$(HostProjectName)" TargetName="$(EnginePrefix)Editor" TargetPlatform="Win64" TargetConfiguration="Development" />
      <Compile Target="$(EnginePrefix)Editor" Platform="Win64" Configuration="Development" Tag="#EditorBinaries_Win64" Arguments="-Project=&quot;$(TempPath)/$(HostProjectName)/$(HostProjectName).uproject&quot; -plugin=&quot;$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)/$(PluginName).uplugin&quot; $(2017Flag) $(AdditionalArguments)"/>
    </Node>
    <Property Name="EditorBinaries" Value="$(EditorBinaries)#EditorBinaries_Win64;" If="'$(PackageType)' == 'Generic' and '$(CanBuildEditorWin64)' == 'true'" />
    <Property Name="BuildTasks" Value="$(BuildTasks)Compile $(EnginePrefix)Editor Win64;" If="'$(ExecutePackage)' == 'false' and '$(PackageType)' == 'Generic' and '$(CanBuildEditorWin64)' == 'true'" />
  </Agent>

  <!--

    =========================================================================
    =
    = >> Package builds and testing
    =
    = Now we build the plugin binaries for the game/client/server targets
    = on all the appropriate platforms.
    =
    = Once we've generated the package, we ZIP it up and then:
    = 
    = * For custom tests against the packaged plugin, we just run them with
    =   the path to the plugin ZIP. It's expected these custom tests will
    =   generate their own projects for testing if needed.
    = * If there are Gauntlet tests to run, assemble a test project with
    =   additional Gauntlet helpers, and build it for the appropriate targets
    =   that the Gauntlet tests all collectively require.
    = * Run any of the Gauntlet tests that are required.
    = * Upload the packaged plugin to Backblaze B2 if necessary.
    = 
    =========================================================================

  -->

  <!--
    Build our Mac game targets. These are only required for the submission package, for custom tests and for
    Gauntlet tests.
  -->

  <ForEach Name="TargetName" Values="$(EnginePrefix)Game">
    <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
      <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
        <Agent Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) (Mac Build Game)" Type="Mac" If="'$(IsBuildMachine)' == 'true'">
          <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#HostProject" Produces="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';') and '$(PackageType)' == 'Generic'">
            <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
              <Expand Name="$(MacroName)" TargetType="Game" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="Mac" />
            </ForEach>
            <Expand
              Name="RemoveStalePrecompiledHeaders"
              ProjectPath="$(TempPath)/$(HostProjectName)"
              TargetName="$(TargetName)"
              TargetPlatform="$(TargetPlatform)"
              TargetConfiguration="$(TargetConfiguration)" />
            <Compile
              Target="$(TargetName)"
              Platform="$(TargetPlatform)"
              Configuration="$(TargetConfiguration)"
              Tag="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)_WithIntermediate"
              Arguments="-Project=&quot;$(TempPath)/$(HostProjectName)/$(HostProjectName).uproject&quot; -plugin=&quot;$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)/$(PluginName).uplugin&quot; -NoPDB -NoDebugInfo $(AdditionalArguments)"
            />
            <Property Name="BinaryExceptRule" Value="" />
            <Property Name="BinaryExceptRule" Value=".../Intermediate/.../Inc/..." If="'$(TargetConfiguration)' != 'Shipping'" />
            <Tag
              Files="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)_WithIntermediate"
              Except="$(BinaryExceptRule)"
              With="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"
            />
            <Tag
              Files="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"
              Filter="*.target"
              With="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"
            />
            <SanitizeReceipt
              Files="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"
            />
          </Node>
          <Property Name="GameBinaries" Value="$(GameBinaries)#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';') and '$(PackageType)' == 'Generic'" />
          <Property Name="BuildTasks" Value="$(BuildTasks)Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration);" If="'$(ExecutePackage)' == 'false' and ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';') and '$(PackageType)' == 'Generic'" />
        </Agent>
      </ForEach>
    </ForEach>
  </ForEach>

  <!--
    Build our Windows game targets. These are only required for the submission package, for custom tests and for
    Gauntlet tests.
  -->

  <ForEach Name="TargetName" Values="$(EnginePrefix)Game">
    <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
      <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
        <Agent Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) (Windows Build Game)" Type="Win64">
          <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#HostProject" Produces="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';') and '$(PackageType)' == 'Generic'">
            <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
              <Expand Name="$(MacroName)" TargetType="Game" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="Win64" />
            </ForEach>
            <Expand
              Name="RemoveStalePrecompiledHeaders"
              ProjectPath="$(TempPath)/$(HostProjectName)"
              TargetName="$(TargetName)"
              TargetPlatform="$(TargetPlatform)"
              TargetConfiguration="$(TargetConfiguration)" />
            <Compile
              Target="$(TargetName)"
              Platform="$(TargetPlatform)"
              Configuration="$(TargetConfiguration)"
              Tag="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)_WithIntermediate"
              Arguments="-Project=&quot;$(TempPath)/$(HostProjectName)/$(HostProjectName).uproject&quot; -plugin=&quot;$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)/$(PluginName).uplugin&quot; $(2017Flag) $(AdditionalArguments)"
            />
            <Property Name="BinaryExceptRule" Value="" />
            <Property Name="BinaryExceptRule" Value=".../Intermediate/.../Inc/..." If="'$(TargetConfiguration)' != 'Shipping'" />
            <Tag
              Files="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)_WithIntermediate"
              Except="$(BinaryExceptRule)"
              With="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"
            />
            <Tag
              Files="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"
              Filter="*.target"
              With="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"
            />
            <SanitizeReceipt
              Files="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"
            />
          </Node>
          <Property Name="GameBinaries" Value="$(GameBinaries)#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';') and '$(PackageType)' == 'Generic'"/>
          <Property Name="BuildTasks" Value="$(BuildTasks)Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration);" If="'$(ExecutePackage)' == 'false' and !ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';') and '$(PackageType)' == 'Generic'" />
        </Agent>
      </ForEach>
    </ForEach>
  </ForEach>

  <ForEach Name="TargetName" Values="$(HostProjectName)Client">
    <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
      <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
        <Agent Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) (Windows Build Client)" Type="Win64">
          <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#HostProject" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';') and '$(PackageType)' == 'Generic'">
            <WriteTextFile
              File="$(TempPath)/$(HostProjectName)/Source/$(HostProjectName)Client.Target.cs"
              Text="using UnrealBuildTool; public class $(HostProjectName)ClientTarget : TargetRules { public $(HostProjectName)ClientTarget(TargetInfo Target) : base(Target) { Type = TargetType.Client; DefaultBuildSettings = BuildSettingsVersion.V2; ExtraModuleNames.AddRange(new string[] { &quot;$(HostProjectName)&quot; }); } }"
            />
            <WriteTextFile
              File="$(TempPath)/$(HostProjectName)/Source/$(HostProjectName)/$(HostProjectName).Build.cs"
              Text="using UnrealBuildTool; public class $(HostProjectName) : ModuleRules { public $(HostProjectName)(ReadOnlyTargetRules Target) : base(Target) { PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs; PublicDependencyModuleNames.AddRange(new string[] { &quot;Core&quot;, &quot;CoreUObject&quot;, &quot;Engine&quot;, &quot;InputCore&quot; }); } }"
            />
            <WriteTextFile
              File="$(TempPath)/$(HostProjectName)/Source/$(HostProjectName)/$(HostProjectName)Module.cpp"
              Text="#include &quot;Modules/ModuleManager.h&quot;&#10;IMPLEMENT_PRIMARY_GAME_MODULE(FDefaultGameModuleImpl, $(HostProjectName), &quot;$(HostProjectName)&quot;);"
            />
            <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
              <Expand Name="$(MacroName)" TargetType="Client" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="Win64" />
            </ForEach>
            <Expand
              Name="RemoveStalePrecompiledHeaders"
              ProjectPath="$(TempPath)/$(HostProjectName)"
              TargetName="$(TargetName)"
              TargetPlatform="$(TargetPlatform)"
              TargetConfiguration="$(TargetConfiguration)" />
            <Compile
              Target="$(TargetName)"
              Platform="$(TargetPlatform)"
              Configuration="$(TargetConfiguration)"
              Arguments="-Project=&quot;$(TempPath)/$(HostProjectName)/$(HostProjectName).uproject&quot; -plugin=&quot;$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)/$(PluginName).uplugin&quot; $(2017Flag) $(AdditionalArguments)"
            />
          </Node>
          <Property Name="BuildTasks" Value="$(BuildTasks)Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration);" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';') and '$(PackageType)' == 'Generic'" />
        </Agent>
      </ForEach>
    </ForEach>
  </ForEach>

  <ForEach Name="TargetName" Values="$(HostProjectName)Server">
    <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
      <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
        <Agent Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) (Windows Build Server)" Type="Win64">
          <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#HostProject" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';') and '$(PackageType)' == 'Generic'">
            <WriteTextFile
              File="$(TempPath)/$(HostProjectName)/Source/$(HostProjectName)Server.Target.cs"
              Text="using UnrealBuildTool; public class $(HostProjectName)ServerTarget : TargetRules { public $(HostProjectName)ServerTarget(TargetInfo Target) : base(Target) { Type = TargetType.Server; DefaultBuildSettings = BuildSettingsVersion.V2; ExtraModuleNames.AddRange(new string[] { &quot;$(HostProjectName)&quot; }); } }"
            />
            <WriteTextFile
              File="$(TempPath)/$(HostProjectName)/Source/$(HostProjectName)/$(HostProjectName).Build.cs"
              Text="using UnrealBuildTool; public class $(HostProjectName) : ModuleRules { public $(HostProjectName)(ReadOnlyTargetRules Target) : base(Target) { PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs; PublicDependencyModuleNames.AddRange(new string[] { &quot;Core&quot;, &quot;CoreUObject&quot;, &quot;Engine&quot;, &quot;InputCore&quot; }); } }"
            />
            <WriteTextFile
              File="$(TempPath)/$(HostProjectName)/Source/$(HostProjectName)/$(HostProjectName)Module.cpp"
              Text="#include &quot;Modules/ModuleManager.h&quot;&#10;IMPLEMENT_PRIMARY_GAME_MODULE(FDefaultGameModuleImpl, $(HostProjectName), &quot;$(HostProjectName)&quot;);"
            />
            <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
              <Expand Name="$(MacroName)" TargetType="Server" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="Win64" />
            </ForEach>
            <Expand
              Name="RemoveStalePrecompiledHeaders"
              ProjectPath="$(TempPath)/$(HostProjectName)"
              TargetName="$(TargetName)"
              TargetPlatform="$(TargetPlatform)"
              TargetConfiguration="$(TargetConfiguration)" />
            <Compile
              Target="$(TargetName)"
              Platform="$(TargetPlatform)"
              Configuration="$(TargetConfiguration)"
              Arguments="-Project=&quot;$(TempPath)/$(HostProjectName)/$(HostProjectName).uproject&quot; -plugin=&quot;$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)/$(PluginName).uplugin&quot; $(2017Flag) $(AdditionalArguments)"
            />
          </Node>
          <Property Name="BuildTasks" Value="$(BuildTasks)Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration);" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';') and '$(PackageType)' == 'Generic'" />
        </Agent>
      </ForEach>
    </ForEach>
  </ForEach>

  <!--
    Create our final package that we will be using for submission and for non-automation testing. This testing
    includes custom scripts and Gauntlet tests, which may require game binaries to be present.
  -->

  <Do If="'$(ExecutePackage)' == 'true'">
    <Expand
      Name="Create Package"
      AgentStage="Create Final Package"
      AgentType="Win64"
      NodeName="Create Package"
      InputProject="#HostProject"
      InputBaseDir="$(TempPath)/$(HostProjectName)/Plugins/$(ShortPluginName)"
      InputBinaries="$(EditorBinaries);$(GameBinaries)"
      OutputDir="$(TempPath)/$(PackageFolder)"
      OutputTag="#PackagedPlugin"
      If="'$(ExecutePackage)' == 'true'"
    />
    <Property Name="PackageTasks" Value="$(PackageTasks)#PackagedPlugin;" />

    <Agent Name="Zip Plugin (Create Final Package)" Type="Win64" If="'$(ExecuteZip)' == 'true'">
      <Node Name="Zip Plugin" Requires="#PackagedPlugin" Produces="#PackagedZip">
        <Delete Files="$(ProjectRoot)/$(PluginName)-$(Distribution)-$(VersionName).zip" />
        <Zip
          FromDir="$(TempPath)/$(PackageFolder)/"
          Files="#PackagedPlugin"
          ZipFile="$(ProjectRoot)/$(PluginName)-$(Distribution)-$(VersionName).zip"
          Tag="#PackagedZip"
      />
      </Node>
    </Agent>
    <Property Name="PackageTasks" Value="$(PackageTasks)#PackagedZip;" If="'$(ExecuteZip)' == 'true'" />
  </Do>

  <!-- 
    Run all of the tests and deployments (which are dynamically defined by UET).
  -->

  <Include Script="$(ScriptNodeIncludes)" />

  <!-- Node that we just use to easily execute all required nodes -->
  <Agent Name="End (Windows End)" Type="Win64">
    <Node Name="End" Requires="$(BuildTasks);$(PackageTasks);$(DynamicNodes);$(DynamicOutputFiles)">
    </Node>
  </Agent>

</BuildGraph>
