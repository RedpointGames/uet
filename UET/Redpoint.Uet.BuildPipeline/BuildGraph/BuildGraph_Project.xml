<?xml version='1.0' ?>
<BuildGraph xmlns="http://www.epicgames.com/BuildGraph" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.epicgames.com/BuildGraph ./Schema.xsd" >

  <!-- Environment options -->
  <Option Name="UETPath" DefaultValue="" Description="Path to the UET binary" />
  <Option Name="UETGlobalArgs" DefaultValue="" Description="Global arguments to pass to the UET binary" />
  <Option Name="EnginePath" Restrict=".*" DefaultValue="" Description="Path to the engine" />
  <Option Name="TempPath" Restrict=".*" DefaultValue="" Description="Path to the temporary directory (must not contain spaces)" />
  <Option Name="ProjectRoot" Restrict=".*" DefaultValue="" Description="Path to the directory that contains the .uproject" />
  <Option Name="RepositoryRoot" Restrict=".*" DefaultValue="" Description="Path to the directory that contains all the project folders and BuildScriptsExtra" />
  <Option Name="ArtifactExportPath" DefaultValue="" Description="Root path under which to export artifacts such as test results" />

  <!-- General options -->
  <Option Name="UProjectPath" Restrict=".*" DefaultValue="" Description="Path to the .uproject file" />
  <Option Name="Distribution" Restrict=".*" DefaultValue="" Description="The distribution being built" />
  <Option Name="IsUnrealEngine5" Restrict="true|false" DefaultValue="false" Description="If true, this is an Unreal Engine 5 project" />
  <Option Name="Timestamp" Restrict="[0-9]+" DefaultValue="0" Description="The UNIX timestamp when this build was generated" />

  <!-- Build options -->
  <Option Name="ExecuteBuild" Restrict="true|false" DefaultValue="true" Description="Whether the build steps should be executed" />
  <Option Name="EditorTarget" Restrict="[^ ]+" DefaultValue="UnrealEditor" Description="Name of the editor target to be built" />
  <Option Name="GameTargets" Restrict="[^ ]*" DefaultValue="UnrealGame" Description="List of game targets to build, e.g. UnrealGame" />
  <Option Name="ClientTargets" Restrict="[^ ]*" DefaultValue="UnrealClient" Description="List of client targets to build, e.g. UnrealClient" />
  <Option Name="ServerTargets" Restrict="[^ ]*" DefaultValue="UnrealServer" Description="List of server targets to build, e.g. UnrealServer" />
  <Option Name="GameTargetPlatforms" Restrict="[^ ]*" DefaultValue="Win64" Description="List of the game target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="ClientTargetPlatforms" Restrict="[^ ]*" DefaultValue="" Description="List of the client target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="ServerTargetPlatforms" Restrict="[^ ]*" DefaultValue="" Description="List of the server target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="GameConfigurations" Restrict="[^ ]*" DefaultValue="Development" Description="List of configurations to build the game targets for, e.g. Development;Shipping" />
  <Option Name="ClientConfigurations" Restrict="[^ ]*" DefaultValue="Development" Description="List of configurations to build the client targets for, e.g. Development;Shipping" />
  <Option Name="ServerConfigurations" Restrict="[^ ]*" DefaultValue="Development" Description="List of configurations to build the server targets for, e.g. Development;Shipping" />
  <Option Name="AndroidGameCookFlavors" Restrict="[^ ]*" DefaultValue="ETC2" Description="The flavors to cook the Android game target for. e.g. ASTC;ETC2" />
  <Option Name="AndroidClientCookFlavors" Restrict="[^ ]*" DefaultValue="ETC2" Description="The flavors to cook the Android client target for.  e.g. ASTC;ETC2" />
  <Option Name="MacPlatforms" Restrict="[^ ]*" DefaultValue="Mac;IOS" Description="List of platforms that macOS agents should build instead of Windows, e.g. Mac;IOS" />
  <Option Name="StrictIncludes" Restrict="true|false" DefaultValue="false" Description="If enabled, builds with strict includes turned on." />

  <!-- Stage options -->
  <Option Name="StageDirectory" Restrict=".+" DefaultValue="Saved\StagedBuilds" Description="The path under which to place all of the staged builds" />

  <!-- Dynamic include options, used by UET to dynamically generate test and deployment nodes -->
  <Option Name="ScriptNodeIncludes" DefaultValue="" Description="Additional script includes paths for nodes" />
  <Option Name="ScriptMacroIncludes" DefaultValue="" Description="Additional script includes paths for macros" />

  <EnvVar Name="AppData" />
  <EnvVar Name="HOME" />

  <Property Name="GameBinaries" Value="" />
  <Property Name="ClientBinaries" Value="" />
  <Property Name="ServerBinaries" Value="" />
  <Property Name="GameCookedContent" Value="" />
  <Property Name="ClientCookedContent" Value="" />
  <Property Name="ServerCookedContent" Value="" />
  <Property Name="GameStaged" Value="" />
  <Property Name="ClientStaged" Value="" />
  <Property Name="ServerStaged" Value="" />
  <Property Name="AdditionalArguments" Value=" -DisableAdaptiveUnity" If="'$(StrictIncludes)' == 'false'" />
  <Property Name="AdditionalArguments" Value=" -NoPCH -NoSharedPCH -DisableUnity" If="'$(StrictIncludes)' == 'true'" />
  <Property Name="DynamicNodes" Value="" />
  <Property Name="DynamicOutputFiles" Value="" />
  <Property Name="DynamicPreDeploymentNodes" Value="" />
  <Property Name="DynamicBeforeCompileMacros" Value="" />

  <!-- 
    Include all the macros dynamically defined by UET.
  -->

  <Include Script="$(ScriptMacroIncludes)" />

  <!--
    Workaround an issue where PCH files are incorrectly re-used even when the engine version changes.
  -->
  <Macro Name="RemoveStalePrecompiledHeaders" Arguments="ProjectPath;TargetName;TargetPlatform;TargetConfiguration">
    <Spawn Exe="$(UETPath)" Arguments="$(UETGlobalArgs) internal remove-stale-precompiled-headers --engine-path &quot;$(EnginePath)&quot; --project-path &quot;$(ProjectPath)&quot; --target-name &quot;$(TargetName)&quot; --target-platform &quot;$(TargetPlatform)&quot; --target-configuration &quot;$(TargetConfiguration)&quot;" />
  </Macro>

  <!-- Targets that we will execute on a Windows machine. -->
  <Do If="'$(ExecuteBuild)' == 'true'">

    <!-- Compile the editor for Windows (necessary for cook later) -->
    <Agent Name="Compile $(EditorTarget) Win64 (Windows Build)" Type="Win64">
      <Node Name="Compile $(EditorTarget) Win64" Produces="#EditorBinaries">
        <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
          <Expand Name="$(MacroName)" TargetType="Editor" TargetName="$(EditorTarget)" TargetPlatform="Win64" TargetConfiguration="Development" HostPlatform="Win64" />
        </ForEach>
        <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(ProjectRoot)" TargetName="$(EditorTarget)" TargetPlatform="Win64" TargetConfiguration="Development" />
        <Compile Target="$(EditorTarget)" Platform="Win64" Configuration="Development" Tag="#EditorBinaries" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)" AllowParallelExecutor="false" />
      </Node>
    </Agent>

    <!-- Compile the game (targeting the Game target, not Client) -->
    <ForEach Name="TargetName" Values="$(GameTargets)">
      <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
          <Agent Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) (Windows Build)" Type="Win64">
            <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
              <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
                <Expand Name="$(MacroName)" TargetType="Game" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="Win64" />
              </ForEach>
              <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(ProjectRoot)" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" />
              <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
              <Tag Files="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
              <SanitizeReceipt Files="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            </Node>
            <Property Name="GameBinaries" Value="$(GameBinaries)#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
          </Agent>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Compile the client (targeting the Client target, not Game) -->
    <ForEach Name="TargetName" Values="$(ClientTargets)">
      <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
          <Agent Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) (Windows Build)" Type="Win64">
            <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
              <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
                <Expand Name="$(MacroName)" TargetType="Client" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="Win64" />
              </ForEach>
              <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(ProjectRoot)" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" />
              <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
              <Tag Files="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#ClientReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
              <SanitizeReceipt Files="#ClientReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            </Node>
            <Property Name="ClientBinaries" Value="$(ClientBinaries)#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
          </Agent>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Compile the dedicated server -->
    <ForEach Name="TargetName" Values="$(ServerTargets)">
      <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
          <Agent Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) (Windows Build)" Type="Win64">
            <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
              <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
                <Expand Name="$(MacroName)" TargetType="Server" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="Win64" />
              </ForEach>
              <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(ProjectRoot)" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" />
              <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
              <Tag Files="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#ServerReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
              <SanitizeReceipt Files="#ServerReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            </Node>
            <Property Name="ServerBinaries" Value="$(ServerBinaries)#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
          </Agent>
        </ForEach>
      </ForEach>
    </ForEach>

  </Do>

  <!-- Targets that we will execute on a macOS machine. -->
  <Do If="'$(ExecuteBuild)' == 'true'">

    <!-- Compile the game (targeting the Game target, not Client) -->
    <ForEach Name="TargetName" Values="$(GameTargets)">
      <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
          <Agent Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) (macOS Build)" Type="Mac">
            <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
              <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
                <Expand Name="$(MacroName)" TargetType="Game" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="Mac" />
              </ForEach>
              <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(ProjectRoot)" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" />
              <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
              <Tag Files="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
              <SanitizeReceipt Files="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            </Node>
            <Property Name="GameBinaries" Value="$(GameBinaries)#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
          </Agent>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Compile the client (targeting the Client target, not Game) -->
    <ForEach Name="TargetName" Values="$(ClientTargets)">
      <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
          <Agent Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) (macOS Build)" Type="Mac">
            <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
              <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
                <Expand Name="$(MacroName)" TargetType="Client" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="Mac" />
              </ForEach>
              <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(ProjectRoot)" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" />
              <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
              <Tag Files="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#ClientReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
              <SanitizeReceipt Files="#ClientReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            </Node>
            <Property Name="ClientBinaries" Value="$(ClientBinaries)#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
          </Agent>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Compile the dedicated server -->
    <ForEach Name="TargetName" Values="$(ServerTargets)">
      <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
          <Agent Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) (macOS Build)" Type="Mac">
            <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
              <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
                <Expand Name="$(MacroName)" TargetType="Server" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="Mac" />
              </ForEach>
              <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(ProjectRoot)" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" />
              <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
              <Tag Files="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#ServerReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
              <SanitizeReceipt Files="#ServerReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            </Node>
            <Property Name="ServerBinaries" Value="$(ServerBinaries)#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
          </Agent>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- We do not cook on macOS, leave it up to the Windows agents for that. -->

  </Do>

  <!-- Targets that we will execute on a Windows machine. -->
  <Do If="'$(ExecuteBuild)' == 'true'">

    <!-- Cook for game platforms (targeting the Game target, not Client) -->
    <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
      <Property Name="CookFlavors" Value="NoCookFlavor" />
      <Property Name="CookFlavors" Value="$(AndroidGameCookFlavors)" If="'$(TargetPlatform)' == 'Android'" />
      <ForEach Name="CookFlavor" Values="$(CookFlavors)">
        <Agent Name="Cook Game $(TargetPlatform) $(CookFlavor) (Windows Cook)" Type="Win64">
          <Node Name="Cook Game $(TargetPlatform) $(CookFlavor)" Requires="#EditorBinaries" Produces="#GameCookedContent_$(TargetPlatform)_$(CookFlavor)">
            <Property Name="CookPlatform" Value="$(TargetPlatform)" />
            <Property Name="CookPlatform" Value="Windows" If="'$(CookPlatform)' == 'Win64'" />
            <Property Name="CookPlatform" Value="$(CookPlatform)_$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
            <Property Name="CookPlatform" Value="$(CookPlatform)NoEditor" If="'$(IsUnrealEngine5)' == 'false'" />
            <Cook Project="$(UProjectPath)" Platform="$(CookPlatform)" Tag="#GameCookedContent_$(TargetPlatform)_$(CookFlavor)" />
          </Node>
          <Property Name="GameCookedContent" Value="$(GameCookedContent)#GameCookedContent_$(TargetPlatform)_$(CookFlavor);"/>
        </Agent>
      </ForEach>
    </ForEach>

    <!-- Cook for client platforms (targeting the Client target, not Game) -->
    <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
      <Property Name="CookFlavors" Value="NoCookFlavor" />
      <Property Name="CookFlavors" Value="$(AndroidClientCookFlavors)" If="'$(TargetPlatform)' == 'Android'" />
      <ForEach Name="CookFlavor" Values="$(CookFlavors)">
        <Agent Name="Cook Client $(TargetPlatform) $(CookFlavor) (Windows Cook)" Type="Win64">
          <Node Name="Cook Client $(TargetPlatform) $(CookFlavor)" Requires="#EditorBinaries" Produces="#ClientCookedContent_$(TargetPlatform)_$(CookFlavor)">
            <Property Name="CookPlatform" Value="$(TargetPlatform)" />
            <Property Name="CookPlatform" Value="Windows" If="'$(CookPlatform)' == 'Win64'" />
            <Property Name="CookPlatform" Value="$(CookPlatform)_$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
            <Property Name="CookPlatform" Value="$(CookPlatform)NoEditor" If="'$(IsUnrealEngine5)' == 'false'" />
            <Property Name="CookPlatform" Value="$(CookPlatform)Client" If="'$(IsUnrealEngine5)' == 'true'" />
            <Cook Project="$(UProjectPath)" Platform="$(CookPlatform)" Tag="#ClientCookedContent_$(TargetPlatform)_$(CookFlavor)" />
          </Node>
          <Property Name="ClientCookedContent" Value="$(ClientCookedContent)#ClientCookedContent_$(TargetPlatform)_$(CookFlavor);"/>
        </Agent>
      </ForEach>
    </ForEach>

    <!-- Cook for dedicated servers -->
    <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
      <Agent Name="Cook Server $(TargetPlatform) (Windows Cook)" Type="Win64">
        <Node Name="Cook Server $(TargetPlatform)" Requires="#EditorBinaries" Produces="#ServerCookedContent_$(TargetPlatform)">
          <Property Name="CookPlatform" Value="$(TargetPlatform)" />
          <Property Name="CookPlatform" Value="Windows" If="'$(CookPlatform)' == 'Win64'" />
          <Property Name="CookPlatform" Value="$(CookPlatform)Server" If="('$(CookPlatform)' == 'Windows') or ('$(CookPlatform)' == 'Mac') or ('$(CookPlatform)' == 'Linux')" />
          <Cook Project="$(UProjectPath)" Platform="$(CookPlatform)" Tag="#ServerCookedContent_$(TargetPlatform)" />
        </Node>
        <Property Name="ServerCookedContent" Value="$(ServerCookedContent)#ServerCookedContent_$(TargetPlatform);"/>
      </Agent>
    </ForEach>

  </Do>

  <!-- Targets that we will execute on a Windows machine. -->
  <Do If="'$(ExecuteBuild)' == 'true'">

    <!-- Pak and stage the game (targeting the Game target, not Client) -->
    <ForEach Name="TargetName" Values="$(GameTargets)">
      <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
          <Property Name="CookFlavors" Value="NoCookFlavor" />
          <Property Name="CookFlavors" Value="$(AndroidGameCookFlavors)" If="'$(TargetPlatform)' == 'Android'" />
          <ForEach Name="CookFlavor" Values="$(CookFlavors)">
            <Agent Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration) $(CookFlavor) (Windows Pak and Stage)" Type="Win64">
              <Property Name="StageOutputs" Value="#GameStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
              <Property Name="StageOutputs" Value="$(StageOutputs)_$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
              <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration) $(CookFlavor)" Requires="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#GameCookedContent_$(TargetPlatform)_$(CookFlavor)" Produces="$(StageOutputs)"  If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
                <Property Name="StagePlatform" Value="$(TargetPlatform)" />
                <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
                <Property Name="StagePlatform" Value="$(StagePlatform)NoEditor" If="(('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'false')" />
                <Property Name="CookFlavorArg" Value="" />
                <Property Name="CookFlavorArg" Value="-cookflavor=$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
                <Property Name="DisableCodeSign" Value="" />
                <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
                <Property Name="PackageFlag" Value="" />
                <Property Name="PackageFlag" Value="-package" If="('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')" />
                <Property Name="PackageFlag" Value="$(PackageFlag) -distribution" If="(('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')) and '$(TargetConfiguration)' == 'Shipping'" />
                <Property Name="PackageFlag" Value="$(PackageFlag) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:StoreVersion=$(Timestamp)" If="'$(TargetPlatform)' == 'Android'" />
                <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) &quot;-platform=$(TargetPlatform)&quot; $(CookFlavorArg) &quot;-clientconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak $(PackageFlag) -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog -ClientCookedTargets=$(TargetName) -target=$(TargetName)" />
                <Tag BaseDir="$(StageDirectory)\$(StagePlatform)" Files="..." With="$(StageOutputs)" />
                <Tag BaseDir="$(ProjectRoot)\Binaries\$(TargetPlatform)" Files="..." With="$(StageOutputs)" If="'$(TargetPlatform)' == 'IOS'" />
                <Do If="'$(TargetPlatform)' == 'Android'">
                  <Copy From="$(ProjectRoot)\Binaries\$(TargetPlatform)\..." To="$(ProjectRoot)\Binaries\$(TargetPlatform)_$(CookFlavor)" />
                  <Tag BaseDir="$(ProjectRoot)\Binaries\$(TargetPlatform)_$(CookFlavor)" Files="..." With="$(StageOutputs)" />
                </Do>
              </Node>
              <Property Name="GameStaged" Value="$(GameStaged)$(StageOutputs);"  If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')" />
            </Agent>
          </ForEach>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Pak and stage the client (targeting the Client target, not Game) -->
    <ForEach Name="TargetName" Values="$(ClientTargets)">
      <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
          <Property Name="CookFlavors" Value="NoCookFlavor" />
          <Property Name="CookFlavors" Value="$(AndroidClientCookFlavors)" If="'$(TargetPlatform)' == 'Android'" />
          <ForEach Name="CookFlavor" Values="$(CookFlavors)">
            <Agent Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration) $(CookFlavor) (Windows Pak and Stage)" Type="Win64">
              <Property Name="StageOutputs" Value="#ClientStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
              <Property Name="StageOutputs" Value="$(StageOutputs)_$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
              <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration) $(CookFlavor)" Requires="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#ClientCookedContent_$(TargetPlatform)_$(CookFlavor)" Produces="$(StageOutputs)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
                <Property Name="StagePlatform" Value="$(TargetPlatform)" />
                <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
                <Property Name="StagePlatform" Value="$(StagePlatform)NoEditor" If="(('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'false')" />
                <Property Name="CookFlavorArg" Value="" />
                <Property Name="CookFlavorArg" Value="-cookflavor=$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
                <Property Name="DisableCodeSign" Value="" />
                <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
                <Property Name="PackageFlag" Value="" />
                <Property Name="PackageFlag" Value="-package" If="('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')" />
                <Property Name="PackageFlag" Value="$(PackageFlag) -distribution" If="(('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')) and '$(TargetConfiguration)' == 'Shipping'" />
                <Property Name="PackageFlag" Value="$(PackageFlag) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:StoreVersion=$(Timestamp)" If="'$(TargetPlatform)' == 'Android'" />
                <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) &quot;-platform=$(TargetPlatform)&quot; $(CookFlavorArg) &quot;-clientconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak $(PackageFlag) -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog -ClientCookedTargets=$(TargetName) -client -target=$(TargetName)" />
                <Tag BaseDir="$(StageDirectory)\$(StagePlatform)" Files="..." With="$(StageOutputs)" />
                <Tag BaseDir="$(ProjectRoot)\Binaries\$(TargetPlatform)" Files="..." With="$(StageOutputs)" If="'$(TargetPlatform)' == 'IOS'" />
                <Do If="'$(TargetPlatform)' == 'Android'">
                  <Copy From="$(ProjectRoot)\Binaries\$(TargetPlatform)\..." To="$(ProjectRoot)\Binaries\$(TargetPlatform)_$(CookFlavor)" />
                  <Tag BaseDir="$(ProjectRoot)\Binaries\$(TargetPlatform)_$(CookFlavor)" Files="..." With="$(StageOutputs)" />
                </Do>
              </Node>
              <Property Name="ClientStaged" Value="$(ClientStaged)$(StageOutputs);" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')" />
            </Agent>
          </ForEach>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Pak and stage the dedicated server -->
    <ForEach Name="TargetName" Values="$(ServerTargets)">
      <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
          <Agent Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration) (Windows Pak and Stage)" Type="Win64">
            <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#ServerCookedContent_$(TargetPlatform)"  Produces="#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
              <Property Name="StagePlatform" Value="$(TargetPlatform)" />
              <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
              <Property Name="StagePlatform" Value="$(StagePlatform)Server" If="('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')" />
              <Property Name="DisableCodeSign" Value="" />
              <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
              <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) -dedicatedserver -noclient &quot;-serverplatform=$(TargetPlatform)&quot; -server &quot;-serverconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog -ServerCookedTargets=$(TargetName) -target=$(TargetName)" />
              <Tag BaseDir="$(StageDirectory)\$(StagePlatform)" Files="..." With="#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            </Node>
            <Property Name="ServerStaged" Value="$(ServerStaged)#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')" />
          </Agent>
        </ForEach>
      </ForEach>
    </ForEach>

  </Do>

  <!-- Targets that we will execute on a macOS machine. -->
  <Do If="'$(ExecuteBuild)' == 'true'">

    <!-- Pak and stage the game (targeting the Game target, not Client) -->
    <ForEach Name="TargetName" Values="$(GameTargets)">
      <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
          <Property Name="CookFlavors" Value="NoCookFlavor" />
          <Property Name="CookFlavors" Value="$(AndroidGameCookFlavors)" If="'$(TargetPlatform)' == 'Android'" />
          <ForEach Name="CookFlavor" Values="$(CookFlavors)">
            <Agent Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration) $(CookFlavor) (macOS Pak and Stage)" Type="Mac">
              <Property Name="StageOutputs" Value="#GameStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
              <Property Name="StageOutputs" Value="$(StageOutputs)_$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
              <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration) $(CookFlavor)" Requires="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#GameCookedContent_$(TargetPlatform)_$(CookFlavor)" Produces="$(StageOutputs)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
                <Property Name="StagePlatform" Value="$(TargetPlatform)" />
                <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
                <Property Name="StagePlatform" Value="$(StagePlatform)NoEditor" If="(('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'false')" />
                <Property Name="CookFlavorArg" Value="" />
                <Property Name="CookFlavorArg" Value="-cookflavor=$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
                <Property Name="DisableCodeSign" Value="" />
                <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
                <Property Name="PackageFlag" Value="" />
                <Property Name="PackageFlag" Value="-package" If="('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')" />
                <Property Name="PackageFlag" Value="$(PackageFlag) -distribution" If="(('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')) and '$(TargetConfiguration)' == 'Shipping'" />
                <Property Name="PackageFlag" Value="$(PackageFlag) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:StoreVersion=$(Timestamp)" If="'$(TargetPlatform)' == 'Android'" />
                <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) &quot;-platform=$(TargetPlatform)&quot; $(CookFlavorArg) &quot;-clientconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak $(PackageFlag) -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog -ClientCookedTargets=$(TargetName) -target=$(TargetName)" />
                <Tag BaseDir="$(StageDirectory)/$(StagePlatform)" Files="..." With="$(StageOutputs)" />
                <Tag BaseDir="$(ProjectRoot)/Binaries/$(TargetPlatform)" Files="..." With="$(StageOutputs)" If="'$(TargetPlatform)' == 'IOS'" />
                <Do If="'$(TargetPlatform)' == 'Android'">
                  <Copy From="$(ProjectRoot)/Binaries/$(TargetPlatform)/..." To="$(ProjectRoot)/Binaries/$(TargetPlatform)_$(CookFlavor)" />
                  <Tag BaseDir="$(ProjectRoot)/Binaries/$(TargetPlatform)_$(CookFlavor)" Files="..." With="$(StageOutputs)" />
                </Do>
              </Node>
              <Property Name="GameStaged" Value="$(GameStaged)$(StageOutputs);" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')"/>
            </Agent>
          </ForEach>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Pak and stage the client (targeting the Client target, not Game) -->
    <ForEach Name="TargetName" Values="$(ClientTargets)">
      <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
          <Property Name="CookFlavors" Value="NoCookFlavor" />
          <Property Name="CookFlavors" Value="$(AndroidClientCookFlavors)" If="'$(TargetPlatform)' == 'Android'" />
          <ForEach Name="CookFlavor" Values="$(CookFlavors)">
            <Agent Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration) $(CookFlavor) (macOS Pak and Stage)" Type="Mac">
              <Property Name="StageOutputs" Value="#ClientStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
              <Property Name="StageOutputs" Value="$(StageOutputs)_$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
              <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration) $(CookFlavor)" Requires="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#ClientCookedContent_$(TargetPlatform)_$(CookFlavor)" Produces="$(StageOutputs)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
                <Property Name="StagePlatform" Value="$(TargetPlatform)" />
                <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
                <Property Name="StagePlatform" Value="$(StagePlatform)NoEditor" If="(('$(CookPlatform)' == 'Windows') or ('$(CookPlatform)' == 'Mac') or ('$(CookPlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'false')" />
                <Property Name="CookFlavorArg" Value="" />
                <Property Name="CookFlavorArg" Value="-cookflavor=$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
                <Property Name="DisableCodeSign" Value="" />
                <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
                <Property Name="PackageFlag" Value="" />
                <Property Name="PackageFlag" Value="-package" If="('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')" />
                <Property Name="PackageFlag" Value="$(PackageFlag) -distribution" If="(('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')) and '$(TargetConfiguration)' == 'Shipping'" />
                <Property Name="PackageFlag" Value="$(PackageFlag) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:StoreVersion=$(Timestamp)" If="'$(TargetPlatform)' == 'Android'" />
                <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) &quot;-platform=$(TargetPlatform)&quot; $(CookFlavorArg) &quot;-clientconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak $(PackageFlag) -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog -ClientCookedTargets=$(TargetName) -client -target=$(TargetName)" />
                <Tag BaseDir="$(StageDirectory)/$(StagePlatform)" Files="..." With="$(StageOutputs)" />
                <Tag BaseDir="$(ProjectRoot)/Binaries/$(TargetPlatform)" Files="..." With="$(StageOutputs)" If="'$(TargetPlatform)' == 'IOS'" />
                <Do If="'$(TargetPlatform)' == 'Android'">
                  <Copy From="$(ProjectRoot)/Binaries/$(TargetPlatform)/..." To="$(ProjectRoot)/Binaries/$(TargetPlatform)_$(CookFlavor)" />
                  <Tag BaseDir="$(ProjectRoot)/Binaries/$(TargetPlatform)_$(CookFlavor)" Files="..." With="$(StageOutputs)" />
                </Do>
              </Node>
              <Property Name="ClientStaged" Value="$(ClientStaged)$(StageOutputs);" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')"/>
            </Agent>
          </ForEach>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Pak and stage the dedicated server -->
    <ForEach Name="TargetName" Values="$(ServerTargets)">
      <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
          <Agent Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration) (macOS Pak and Stage)" Type="Mac">
            <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#ServerCookedContent_$(TargetPlatform)"  Produces="#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
              <Property Name="StagePlatform" Value="$(TargetPlatform)" />
              <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
              <Property Name="StagePlatform" Value="$(StagePlatform)Server" If="('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')" />
              <Property Name="DisableCodeSign" Value="" />
              <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
              <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) -dedicatedserver -noclient &quot;-serverplatform=$(TargetPlatform)&quot; -server &quot;-serverconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog -ServerCookedTargets=$(TargetName) -target=$(TargetName)" />
              <Tag BaseDir="$(StageDirectory)/$(StagePlatform)" Files="..." With="#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            </Node>
            <Property Name="ServerStaged" Value="$(ServerStaged)#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')"/>
          </Agent>
        </ForEach>
      </ForEach>
    </ForEach>

  </Do>

  <!-- 
    Run all of the tests and deployments (which are dynamically defined by UET).
  -->

  <Include Script="$(ScriptNodeIncludes)" />

  <!-- Node that we just use to easily execute all required nodes -->
  <Agent Name="End (Windows Tag)" Type="Win64">
    <Node Name="End" Requires="$(GameStaged);$(ClientStaged);$(ServerStaged);$(DynamicNodes);$(DynamicOutputFiles)">
    </Node>
  </Agent>

</BuildGraph>
