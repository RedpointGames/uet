<?xml version='1.0' ?>
<BuildGraph xmlns="http://www.epicgames.com/BuildGraph" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.epicgames.com/BuildGraph ./Schema.xsd" >

  <!-- Environment options -->
  <Option Name="UETPath" DefaultValue="" Description="Path to the UET binary" />
  <Option Name="UETGlobalArgs" DefaultValue="" Description="Global arguments to pass to the UET binary" />
  <Option Name="EnginePath" Restrict=".*" DefaultValue="" Description="Path to the engine" />
  <Option Name="TempPath" Restrict=".*" DefaultValue="" Description="Path to the temporary directory (must not contain spaces)" />
  <Option Name="ProjectRoot" Restrict=".*" DefaultValue="" Description="Path to the directory that contains the .uproject" />
  <Option Name="RepositoryRoot" Restrict=".*" DefaultValue="" Description="Path to the directory that contains all the project folders and BuildScriptsExtra" />
  <Option Name="ArtifactExportPath" DefaultValue="" Description="Root path under which to export artifacts such as test results" />

  <!-- General options -->
  <Option Name="UProjectPath" Restrict=".*" DefaultValue="" Description="Path to the .uproject file" />
  <Option Name="Distribution" Restrict=".*" DefaultValue="" Description="The distribution being built" />
  <Option Name="IsUnrealEngine5" Restrict="true|false" DefaultValue="false" Description="If true, this is an Unreal Engine 5 project" />
  <Option Name="Timestamp" Restrict="[0-9]+" DefaultValue="0" Description="The UNIX timestamp when this build was generated" />

  <!-- Build options -->
  <Option Name="ExecuteBuild" Restrict="true|false" DefaultValue="true" Description="Whether the build steps should be executed" />
  <Option Name="EditorTarget" Restrict="[^ ]+" DefaultValue="UnrealEditor" Description="Name of the editor target to be built" />
  <Option Name="GameTargets" Restrict="[^ ]*" DefaultValue="UnrealGame" Description="List of game targets to build, e.g. UnrealGame" />
  <Option Name="ClientTargets" Restrict="[^ ]*" DefaultValue="UnrealClient" Description="List of client targets to build, e.g. UnrealClient" />
  <Option Name="ServerTargets" Restrict="[^ ]*" DefaultValue="UnrealServer" Description="List of server targets to build, e.g. UnrealServer" />
  <Option Name="GameTargetPlatforms" Restrict="[^ ]*" DefaultValue="Win64" Description="List of the game target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="ClientTargetPlatforms" Restrict="[^ ]*" DefaultValue="" Description="List of the client target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="ServerTargetPlatforms" Restrict="[^ ]*" DefaultValue="" Description="List of the server target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="GameConfigurations" Restrict="[^ ]*" DefaultValue="Development" Description="List of configurations to build the game targets for, e.g. Development;Shipping" />
  <Option Name="ClientConfigurations" Restrict="[^ ]*" DefaultValue="Development" Description="List of configurations to build the client targets for, e.g. Development;Shipping" />
  <Option Name="ServerConfigurations" Restrict="[^ ]*" DefaultValue="Development" Description="List of configurations to build the server targets for, e.g. Development;Shipping" />
  <Option Name="AndroidGameCookFlavors" Restrict="[^ ]*" DefaultValue="ETC2" Description="The flavors to cook the Android game target for. e.g. ASTC;ETC2" />
  <Option Name="AndroidClientCookFlavors" Restrict="[^ ]*" DefaultValue="ETC2" Description="The flavors to cook the Android client target for.  e.g. ASTC;ETC2" />
  <Option Name="MacPlatforms" Restrict="[^ ]*" DefaultValue="Mac;IOS" Description="List of platforms that macOS agents should build instead of Windows, e.g. Mac;IOS" />
  <Option Name="StrictIncludes" Restrict="true|false" DefaultValue="false" Description="If enabled, builds with strict includes turned on." />

  <!-- Stage options -->
  <Option Name="StageDirectory" Restrict=".+" DefaultValue="Saved\StagedBuilds" Description="The path under which to place all of the staged builds" />

  <!-- Dynamic include options, used by UET to dynamically generate test and deployment nodes -->
  <Option Name="ScriptNodeIncludes" DefaultValue="" Description="Additional script includes paths for nodes" />
  <Option Name="ScriptMacroIncludes" DefaultValue="" Description="Additional script includes paths for macros" />

  <EnvVar Name="AppData" />
  <EnvVar Name="HOME" />

  <Property Name="GameBinaries" Value="" />
  <Property Name="ClientBinaries" Value="" />
  <Property Name="ServerBinaries" Value="" />
  <Property Name="GameCookedContent" Value="" />
  <Property Name="ClientCookedContent" Value="" />
  <Property Name="ServerCookedContent" Value="" />
  <Property Name="GameStaged" Value="" />
  <Property Name="ClientStaged" Value="" />
  <Property Name="ServerStaged" Value="" />
  <Property Name="AdditionalArguments" Value=" -DisableAdaptiveUnity" If="'$(StrictIncludes)' == 'false'" />
  <Property Name="AdditionalArguments" Value=" -NoPCH -NoSharedPCH -DisableUnity" If="'$(StrictIncludes)' == 'true'" />
  <Property Name="DynamicNodes" Value="" />
  <Property Name="DynamicOutputFiles" Value="" />
  <Property Name="DynamicPreDeploymentNodes" Value="" />
  <Property Name="DynamicBeforeCompileMacros" Value="" />

  <Property Name="GeneratedVariantsList" Value="" />

  <!-- 
    Include all the macros dynamically defined by UET.
  -->

  <Include Script="$(ScriptMacroIncludes)" />

  <!--
    Workaround an issue where PCH files are incorrectly re-used even when the engine version changes.
  -->
  <Macro Name="RemoveStalePrecompiledHeaders" Arguments="ProjectPath;TargetName;TargetPlatform;TargetConfiguration">
    <Spawn Exe="$(UETPath)" Arguments="$(UETGlobalArgs) internal remove-stale-precompiled-headers --engine-path &quot;$(EnginePath)&quot; --project-path &quot;$(ProjectPath)&quot; --target-name &quot;$(TargetName)&quot; --target-platform &quot;$(TargetPlatform)&quot; --target-configuration &quot;$(TargetConfiguration)&quot;" />
  </Macro>

  <!--
    Macro for compiling the editor.
  -->
  <Macro Name="CompileEditor" Arguments="EditorTarget;TargetPlatform;TargetConfiguration">
    <Agent Name="Compile $(EditorTarget) $(TargetPlatform) (Windows Build)" Type="$(TargetPlatform)">
      <Node Name="Compile $(EditorTarget) $(TargetPlatform)" Produces="#EditorBinaries">
        <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
          <Expand Name="$(MacroName)" TargetType="Editor" TargetName="$(EditorTarget)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="$(TargetPlatform)" />
        </ForEach>
        <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(ProjectRoot)" TargetName="$(EditorTarget)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" />
        <Compile Target="$(EditorTarget)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#EditorBinaries" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)" AllowParallelExecutor="false" />
      </Node>
    </Agent>
  </Macro>

  <!--
    Macro for compiling a variant.
  -->
  <Macro Name="CompileVariant" Arguments="TargetType;TargetName;TargetStore;TargetConfiguration">

    <Property Name="TargetPlatform" Value="$(TargetStore)" />
    <Property Name="TargetPlatform" Value="Android" If="'$(TargetStore)' == 'MetaQuest'" />
    <Property Name="TargetPlatform" Value="Android" If="'$(TargetStore)' == 'GooglePlay'" />

    <Property Name="VariantName" Value="Compile_$(TargetType)_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />

    <Property Name="HostPlatform" Value="Win64" />
    <Property Name="HostPlatform" Value="Mac" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')" />

    <Property Name="AgentSuffix" Value="(Windows Build)" />
    <Property Name="AgentSuffix" Value="(macOS Build)" If="'$(HostPlatform)' == 'Mac'" />

    <Agent
      Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration) $(AgentSuffix)"
      Type="$(HostPlatform)"
      If="!ContainsItem('$(GeneratedVariantsList)', '$(VariantName)', ';')"
    >
      <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#$(TargetType)Binaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)">
        <ForEach Name="MacroName" Values="$(DynamicBeforeCompileMacros)">
          <Expand Name="$(MacroName)" TargetType="$(TargetType)" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" HostPlatform="$(HostPlatform)" />
        </ForEach>
        <Expand Name="RemoveStalePrecompiledHeaders" ProjectPath="$(ProjectRoot)" TargetName="$(TargetName)" TargetPlatform="$(TargetPlatform)" TargetConfiguration="$(TargetConfiguration)" />
        <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#$(TargetType)Binaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
        <Tag Files="#$(TargetType)Binaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#$(TargetType)Receipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
        <SanitizeReceipt Files="#$(TargetType)Receipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
      </Node>
      <Property Name="$(TargetType)Binaries" Value="$($(TargetType)Binaries)#$(TargetType)Binaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
    </Agent>

    <Property
      Name="GeneratedVariantsList"
      Value="$(GeneratedVariantsList)$(VariantName);"
      If="!ContainsItem('$(GeneratedVariantsList)', '$(VariantName)', ';')" />

  </Macro>

  <!--
    Macro for cooking a variant.
  -->
  <Macro Name="CookVariant" Arguments="TargetType;TargetStore;CookFlavor">

    <Property Name="TargetPlatform" Value="$(TargetStore)" />
    <Property Name="TargetPlatform" Value="Android" If="'$(TargetStore)' == 'MetaQuest'" />
    <Property Name="TargetPlatform" Value="Android" If="'$(TargetStore)' == 'GooglePlay'" />

    <Property Name="VariantName" Value="Cook_$(TargetType)_$(TargetPlatform)_$(CookFlavor)" />

    <Agent
      Name="Cook $(TargetType) $(TargetPlatform) $(CookFlavor) (Windows Cook)"
      Type="Win64"
      If="!ContainsItem('$(GeneratedVariantsList)', '$(VariantName)', ';')"
    >
      <Node Name="Cook $(TargetType) $(TargetPlatform) $(CookFlavor)" Requires="#EditorBinaries" Produces="#$(TargetType)CookedContent_$(TargetPlatform)_$(CookFlavor)">
        <Property Name="CookPlatform" Value="$(TargetPlatform)" />
        <Property Name="CookPlatform" Value="Windows" If="'$(CookPlatform)' == 'Win64'" />
        <Property Name="CookPlatform" Value="$(CookPlatform)_$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />
        <Property Name="CookPlatform" Value="$(CookPlatform)NoEditor" If="'$(IsUnrealEngine5)' == 'false'" />
        <Property Name="CookPlatform" Value="$(CookPlatform)Client" If="'$(IsUnrealEngine5)' == 'true' and '$(TargetType)' == 'Client'" />
        <Property Name="CookPlatform" Value="$(CookPlatform)Server" If="(('$(CookPlatform)' == 'Windows') or ('$(CookPlatform)' == 'Mac') or ('$(CookPlatform)' == 'Linux')) and '$(TargetType)' == 'Server'" />
        <Cook Project="$(UProjectPath)" Platform="$(CookPlatform)" Tag="#$(TargetType)CookedContent_$(TargetPlatform)_$(CookFlavor)" />
      </Node>
      <Property Name="$(TargetType)CookedContent" Value="$($(TargetType)CookedContent)#$(TargetType)CookedContent_$(TargetPlatform)_$(CookFlavor);"/>
    </Agent>

    <Property
      Name="GeneratedVariantsList"
      Value="$(GeneratedVariantsList)$(VariantName);"
      If="!ContainsItem('$(GeneratedVariantsList)', '$(VariantName)', ';')" />

  </Macro>

  <!--
    Macro for packaging a variant.
  -->
  <Macro Name="PackageVariant" Arguments="TargetType;TargetName;TargetStore;TargetConfiguration;CookFlavor">

    <!-- Variant name calculated before normalization this time, since we want multiple packaging jobs when targeting multiple stores. -->
    <Property Name="VariantName" Value="Package_$(TargetType)_$(TargetName)_$(TargetStore)_$(TargetConfiguration)_$(CookFlavor)" />

    <Property Name="TargetPlatform" Value="$(TargetStore)" />
    <Property Name="TargetPlatform" Value="Android" If="'$(TargetStore)' == 'MetaQuest'" />
    <Property Name="TargetPlatform" Value="Android" If="'$(TargetStore)' == 'GooglePlay'" />

    <Property Name="HostPlatform" Value="Win64" />
    <Property Name="HostPlatform" Value="Mac" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')" />

    <Property Name="AgentSuffix" Value="(Windows Pak and Stage)" />
    <Property Name="AgentSuffix" Value="(macOS Pak and Stage)" If="'$(HostPlatform)' == 'Mac'" />

    <!-- Specify the agent that this job will run on for this variant. -->
    <Agent
      Name="Pak and Stage $(TargetName) $(TargetStore) $(TargetConfiguration) $(CookFlavor) $(AgentSuffix)"
      Type="$(HostPlatform)"
      If="!ContainsItem('$(GeneratedVariantsList)', '$(VariantName)', ';')"
    >
      <!-- Figure out the label to tag the stage outputs with, based on whether we have a cook flavor. -->
      <Property Name="StageOutputs" Value="#$(TargetType)Staged_$(TargetName)_$(TargetStore)_$(TargetConfiguration)" />
      <Property Name="StageOutputs" Value="$(StageOutputs)_$(CookFlavor)" If="'$(CookFlavor)' != 'NoCookFlavor'" />

      <!-- Specify the job to run. We do all our other property declarations under here due to BuildGraph quirks. -->
      <Node Name="Pak and Stage $(TargetName) $(TargetStore) $(TargetConfiguration) $(CookFlavor)" Requires="#$(TargetType)Binaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#$(TargetType)CookedContent_$(TargetPlatform)_$(CookFlavor)" Produces="$(StageOutputs)">

        <!-- Configure directory seperator based on host platform. -->
        <Property Name="Slash" Value="\" />
        <Property Name="Slash" Value="/" If="'$(HostPlatform)' == 'Mac'" />

        <!-- Figure out the name of the directory under "StagedBuilds". -->
        <Property Name="StagePlatform" Value="$(TargetPlatform)" />
        <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
        <Do If="'$(StagePlatform)' == 'Windows' or '$(StagePlatform)' == 'Mac' or '$(StagePlatform)' == 'Linux'">
          <Property
            Name="StagePlatform"
            Value="$(StagePlatform)NoEditor"
            If="'$(TargetType)' != 'Server' and '$(IsUnrealEngine5)' == 'false'" />
          <Property
            Name="StagePlatform"
            Value="$(StagePlatform)Server"
            If="'$(TargetType)' == 'Server'" />
        </Do>

        <!-- Set up the extra BuildCookRun arguments to be empty. -->
        <Property Name="BCRArgs" Value="" />

        <!-- Specify the -cookflavor argument if a cook flavor is specified. -->
        <Property
          If="'$(CookFlavor)' != 'NoCookFlavor'"
          Name="BCRArgs"
          Value="$(BCRArgs) -cookflavor=$(CookFlavor)" />

        <!-- Disable code signing for desktop platforms, where code signing isn't necessary. -->
        <Property
          If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')"
          Name="BCRArgs"
          Value="$(BCRArgs) -NoCodeSign" />

        <!-- Specify the -package flag if we're targeting iOS or Android. -->
        <Property
          If="('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')"
          Name="BCRArgs"
          Value="$(BCRArgs) -package" />

        <!-- Specify the -distribution flag if we're targeting iOS or Android AND the configuration is Shipping. -->
        <Property
          If="(('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')) and '$(TargetConfiguration)' == 'Shipping'"
          Name="BCRArgs"
          Value="$(BCRArgs) -distribution" />

        <!-- 
          Automatically set the StoreVersion for Android so that it increments over time. 
          This is necessary for store submission pretty much everywhere. 
        -->
        <Property
          If="'$(TargetPlatform)' == 'Android'"
          Name="BCRArgs"
          Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:StoreVersion=$(Timestamp)" />

        <!-- If we're not packaging a dedicated server, add the parameters necessary to package Game/Client targets. -->
        <Do If="'$(TargetType)' != 'Server'">
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) &quot;-platform=$(TargetPlatform)&quot;" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) &quot;-clientconfig=$(TargetConfiguration)&quot;" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ClientCookedTargets=$(TargetName)" />
          <!-- Also specify the -client flag if this is a Client target, not a Game target. -->
          <Property
            If="'$(TargetType)' == 'Client'"
            Name="BCRArgs"
            Value="$(BCRArgs) -client" />
        </Do>

        <!-- If we're packaging a dedicated server, add the parameters necessary to package it. -->
        <Do If="'$(TargetType)' == 'Server'">
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -dedicatedserver -noclient -server" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) &quot;-serverplatform=$(TargetPlatform)&quot;" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) &quot;-serverconfig=$(TargetConfiguration)&quot;" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ServerCookedTargets=$(TargetName)" />
        </Do>

        <!-- 
          If the original target platform is "MetaQuest", then we need to set packaging arguments 
          necessary for Meta Quest. This is because Unreal Engine bundles all Android platforms
          under the same 'Android' platform, even though they can have radically different
          packaging requirements.
        -->
        <Do If="'$(TargetStore)' == 'MetaQuest'">
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:InstallLocation=InternalOnly" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bPackageDataInsideApk=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bForceSmallOBBFiles=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bAllowLargeOBBFiles=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bAllowPatchOBBFile=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bAllowOverflowOBBFiles=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bUseExternalFilesDir=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bEnableBundle=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) &quot;-ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:ExtraApplicationSettings&#x3D;&lt;meta-data android:name&#x3D;\&quot;com.oculus.supportedDevices\&quot; android:value&#x3D;\&quot;quest|quest2|questpro|quest3\&quot; &#x2F;&gt;&quot;" />
          <Property
            If="'$(TargetConfiguration)' == 'Shipping'"
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bRemoveOSIG=True" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bBuildForArm64=True" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bBuildForX8664=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bEnableGooglePlaySupport=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bPackageForMetaQuest=True" />
        </Do>

        <!-- 
          If the original target platform is "GooglePlay", then we need to set packaging arguments 
          necessary for Google Play. This is because Unreal Engine bundles all Android platforms
          under the same 'Android' platform, even though they can have radically different
          packaging requirements.
        -->
        <Do If="'$(TargetStore)' == 'GooglePlay'">
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bPackageDataInsideApk=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bForceSmallOBBFiles=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bAllowLargeOBBFiles=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bAllowPatchOBBFile=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bAllowOverflowOBBFiles=False" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bEnableBundle=True" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bEnableUniversalAPK=True" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bBundleABISplit=True" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bBundleLanguageSplit=True" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bBundleDensitySplit=True" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:ExtraApplicationSettings=" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bEnableGooglePlaySupport=True" />
          <Property
            Name="BCRArgs"
            Value="$(BCRArgs) -ini:Engine:[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]:bPackageForMetaQuest=False" />
        </Do>

        <!-- Execute the BuildCookRun command with all the desired arguments. -->
        <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 -SkipCook -cook -pak -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog -target=$(TargetName) $(BCRArgs)" />

        <!-- Figure out the target directory. -->
        <Property Name="TargetDirectoryName" Value="$(TargetStore)" />
        <Do If="'$(TargetPlatform)' == 'Android' and '$(CookFlavor)' != 'NoCookFlavor'">
          <Property Name="TargetDirectoryName" Value="$(TargetDirectoryName)_$(CookFlavor)" />
        </Do>

        <!-- If the target directory is the same as the target platform, tag directly. -->
        <Do If="'$(TargetDirectoryName)' == '$(TargetPlatform)'">
          <Tag
            BaseDir="$(StageDirectory)$(Slash)$(StagePlatform)"
            Files="..."
            With="$(StageOutputs)" />
          <Tag
            BaseDir="$(ProjectRoot)$(Slash)Binaries$(Slash)$(TargetPlatform)"
            Files="..."
            With="$(StageOutputs)" />
        </Do>

        <!-- 
          Otherwise, copy the files to the target directory and tag there. This is necessary for
          Android builds using a store variant or cook flavor.
        -->
        <Do If="'$(TargetDirectoryName)' != '$(TargetPlatform)'">
          <Copy
            From="$(StageDirectory)$(Slash)$(StagePlatform)$(Slash)..."
            To="$(StageDirectory)$(Slash)$(TargetDirectoryName)" />
          <Tag
            BaseDir="$(StageDirectory)$(Slash)$(TargetDirectoryName)"
            Files="..."
            With="$(StageOutputs)" />
          <Copy
            From="$(ProjectRoot)$(Slash)Binaries$(Slash)$(TargetPlatform)$(Slash)..."
            To="$(ProjectRoot)$(Slash)Binaries$(Slash)$(TargetDirectoryName)" />
          <Tag
            BaseDir="$(ProjectRoot)$(Slash)Binaries$(Slash)$(TargetDirectoryName)"
            Files="..."
            With="$(StageOutputs)" />
        </Do>
      </Node>

      <!-- Add the staged outputs to the overall stage label so we can depend on all of them later. -->
      <Property Name="$(TargetType)Staged" Value="$($(TargetType)Staged)$(StageOutputs);" />
    </Agent>

    <Property
      Name="GeneratedVariantsList"
      Value="$(GeneratedVariantsList)$(VariantName);"
      If="!ContainsItem('$(GeneratedVariantsList)', '$(VariantName)', ';')" />

  </Macro>

  <!-- Compilation targets; the expanded macro picks the correct platform to run the compile on depending on the target platform. -->
  <Do If="'$(ExecuteBuild)' == 'true'">

    <!-- Compile the editor for Windows (necessary for cook later) -->
    <Expand Name="CompileEditor" EditorTarget="$(EditorTarget)" TargetPlatform="Win64" TargetConfiguration="Development" />

    <!-- Compile the game (targeting the Game target, not Client) -->
    <ForEach Name="TargetName" Values="$(GameTargets)">
      <ForEach Name="TargetStore" Values="$(GameTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
          <Expand Name="CompileVariant" TargetType="Game" TargetName="$(TargetName)" TargetStore="$(TargetStore)" TargetConfiguration="$(TargetConfiguration)" />
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Compile the client (targeting the Client target, not Game) -->
    <ForEach Name="TargetName" Values="$(ClientTargets)">
      <ForEach Name="TargetStore" Values="$(ClientTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
          <Expand Name="CompileVariant" TargetType="Client" TargetName="$(TargetName)" TargetStore="$(TargetStore)" TargetConfiguration="$(TargetConfiguration)" />
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Compile the dedicated server -->
    <ForEach Name="TargetName" Values="$(ServerTargets)">
      <ForEach Name="TargetStore" Values="$(ServerTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
          <Expand Name="CompileVariant" TargetType="Server" TargetName="$(TargetName)" TargetStore="$(TargetStore)" TargetConfiguration="$(TargetConfiguration)" />
        </ForEach>
      </ForEach>
    </ForEach>

  </Do>

  <!-- Cook targets; these always execute on a Windows machine. -->
  <Do If="'$(ExecuteBuild)' == 'true'">

    <!-- Cook for game platforms (targeting the Game target, not Client) -->
    <ForEach Name="TargetStore" Values="$(GameTargetPlatforms)">
      <Property Name="CookFlavors" Value="NoCookFlavor" />
      <!-- @todo Tidy this up; probably when we generate these blocks instead of only supporting matrixes. -->
      <Property Name="CookFlavors" Value="$(AndroidGameCookFlavors)" If="'$(TargetStore)' == 'Android' and '$(AndroidGameCookFlavors)' != ''" />
      <Property Name="CookFlavors" Value="$(AndroidGameCookFlavors)" If="'$(TargetStore)' == 'MetaQuest' and '$(AndroidGameCookFlavors)' != ''" />
      <Property Name="CookFlavors" Value="$(AndroidGameCookFlavors)" If="'$(TargetStore)' == 'GooglePlay' and '$(AndroidGameCookFlavors)' != ''" />
      <ForEach Name="CookFlavor" Values="$(CookFlavors)">
        <Expand Name="CookVariant" TargetType="Game" TargetStore="$(TargetStore)" CookFlavor="$(CookFlavor)" />
      </ForEach>
    </ForEach>

    <!-- Cook for client platforms (targeting the Client target, not Game) -->
    <ForEach Name="TargetStore" Values="$(ClientTargetPlatforms)">
      <Property Name="CookFlavors" Value="NoCookFlavor" />
      <!-- @todo Tidy this up; probably when we generate these blocks instead of only supporting matrixes. -->
      <Property Name="CookFlavors" Value="$(AndroidClientCookFlavors)" If="'$(TargetStore)' == 'Android' and '$(AndroidClientCookFlavors)' != ''" />
      <Property Name="CookFlavors" Value="$(AndroidClientCookFlavors)" If="'$(TargetStore)' == 'MetaQuest' and '$(AndroidClientCookFlavors)' != ''" />
      <Property Name="CookFlavors" Value="$(AndroidClientCookFlavors)" If="'$(TargetStore)' == 'GooglePlay' and '$(AndroidClientCookFlavors)' != ''" />
      <ForEach Name="CookFlavor" Values="$(CookFlavors)">
        <Expand Name="CookVariant" TargetType="Client" TargetStore="$(TargetStore)" CookFlavor="$(CookFlavor)" />
      </ForEach>
    </ForEach>

    <!-- Cook for dedicated servers -->
    <ForEach Name="TargetStore" Values="$(ServerTargetPlatforms)">
      <Expand Name="CookVariant" TargetType="Server" TargetStore="$(TargetStore)" CookFlavor="NoCookFlavor" />
    </ForEach>

  </Do>

  <!-- Packaging targets; the expanded macro picks the correct platform to run the compile on depending on the target platform. -->
  <Do If="'$(ExecuteBuild)' == 'true'">

    <!-- Pak and stage the game (targeting the Game target, not Client) -->
    <ForEach Name="TargetName" Values="$(GameTargets)">
      <ForEach Name="TargetStore" Values="$(GameTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
          <Property Name="CookFlavors" Value="NoCookFlavor" />
          <!-- @todo Tidy this up; probably when we generate these blocks instead of only supporting matrixes. -->
          <Property Name="CookFlavors" Value="$(AndroidGameCookFlavors)" If="'$(TargetStore)' == 'Android' and '$(AndroidGameCookFlavors)' != ''" />
          <Property Name="CookFlavors" Value="$(AndroidGameCookFlavors)" If="'$(TargetStore)' == 'MetaQuest' and '$(AndroidGameCookFlavors)' != ''" />
          <Property Name="CookFlavors" Value="$(AndroidGameCookFlavors)" If="'$(TargetStore)' == 'GooglePlay' and '$(AndroidGameCookFlavors)' != ''" />
          <ForEach Name="CookFlavor" Values="$(CookFlavors)">
            <Expand
              Name="PackageVariant"
              TargetType="Game"
              TargetName="$(TargetName)"
              TargetStore="$(TargetStore)"
              TargetConfiguration="$(TargetConfiguration)"
              CookFlavor="$(CookFlavor)" />
          </ForEach>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Pak and stage the client (targeting the Client target, not Game) -->
    <ForEach Name="TargetName" Values="$(ClientTargets)">
      <ForEach Name="TargetStore" Values="$(ClientTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
          <Property Name="CookFlavors" Value="NoCookFlavor" />
          <!-- @todo Tidy this up; probably when we generate these blocks instead of only supporting matrixes. -->
          <Property Name="CookFlavors" Value="$(AndroidClientCookFlavors)" If="'$(TargetStore)' == 'Android' and '$(AndroidClientCookFlavors)' != ''" />
          <Property Name="CookFlavors" Value="$(AndroidClientCookFlavors)" If="'$(TargetStore)' == 'MetaQuest' and '$(AndroidClientCookFlavors)' != ''" />
          <Property Name="CookFlavors" Value="$(AndroidClientCookFlavors)" If="'$(TargetStore)' == 'GooglePlay' and '$(AndroidClientCookFlavors)' != ''" />
          <ForEach Name="CookFlavor" Values="$(CookFlavors)">
            <Expand
              Name="PackageVariant"
              TargetType="Client"
              TargetName="$(TargetName)"
              TargetStore="$(TargetStore)"
              TargetConfiguration="$(TargetConfiguration)"
              CookFlavor="$(CookFlavor)" />
          </ForEach>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Pak and stage the dedicated server -->
    <ForEach Name="TargetName" Values="$(ServerTargets)">
      <ForEach Name="TargetStore" Values="$(ServerTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
          <Expand
            Name="PackageVariant"
            TargetType="Server"
            TargetName="$(TargetName)"
            TargetStore="$(TargetStore)"
            TargetConfiguration="$(TargetConfiguration)"
            CookFlavor="NoCookFlavor" />
        </ForEach>
      </ForEach>
    </ForEach>

  </Do>

  <!-- 
    Run all of the tests and deployments (which are dynamically defined by UET).
  -->

  <Include Script="$(ScriptNodeIncludes)" />

  <!-- Node that we just use to easily execute all required nodes -->
  <Agent Name="End (Windows Tag)" Type="Win64">
    <Node Name="End" Requires="$(GameStaged);$(ClientStaged);$(ServerStaged);$(DynamicNodes);$(DynamicOutputFiles)">
    </Node>
  </Agent>

</BuildGraph>
